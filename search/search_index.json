{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>A Minecraft Server/Plugin Updater</p> <p>This is a rewrite of cupang-updater with a focus on making it easier to implement new features.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation for this project can be found here.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install git+https://github.com/cupang-afk/cupang-updater2.git#egg=cupang-updater\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>$ cupang-updater\n</code></pre> <p>Running for the first time creates a <code>cupang-updater</code> directory with a <code>config.yaml</code> file for configuration. Use <code>--config-dir</code> and <code>--config</code> to change their locations.</p>"},{"location":"#custom-updater","title":"Custom Updater","text":"<p>To create a custom updater, implement a new class that extends <code>PluginUpdater</code> or <code>ServerUpdater</code> and register it using <code>plugin_updater_register</code> or <code>server_updater_register</code>.</p> <p>Here is an example of a custom plugin updater:</p> <pre><code>from cupang_updater.updater.plugin.base import PluginUpdater\nfrom cupang_updater.manager.plugin import plugin_updater_register\n\nclass MyCustomPluginUpdater(PluginUpdater):\n    def get_update(self):\n        # Implement your update logic here\n        pass\n\nplugin_updater_register(MyCustomPluginUpdater)\n</code></pre> <p>Place your custom updater script in <code>cupang-updater/ext_updater</code> as a <code>.py</code> file, and it will be automatically detected.</p> example hangar.py <pre><code>import json\n\nimport strictyaml as sy\n\nfrom cupang_updater.updater.base import CommonData\nfrom cupang_updater.updater.plugin.base import PluginUpdater, PluginUpdaterConfig, PluginUpdaterConfigSchema\nfrom cupang_updater.manager.plugin import plugin_updater_register\n\n\nclass PlatformType(sy.Str):\n    platform = [\"paper\", \"waterfall\", \"velocity\"]\n\n    def validate_scalar(self, chunk):\n        val: str = chunk.contents\n        val = val.lower()\n        if val not in self.platform:\n            chunk.expecting_but_found(f\"when expecting one of these: {self.platform}\")\n        return super().validate_scalar(chunk)\n\n\nclass Channel(sy.Str):\n    channel = [\"release\", \"snapshot\", \"alpha\"]\n\n    def validate_scalar(self, chunk):\n        val: str = chunk.contents\n        if val not in self.channel:\n            chunk.expecting_but_found(f\"when expecting one of these: {self.channel}\")\n\n        return super().validate_scalar(chunk)\n\n\nclass HangarUpdater(PluginUpdater):\n    def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n        self.api = \"https://hangar.papermc.io/api/v1/projects\"\n        super().__init__(plugin_data, updater_config)\n\n    @staticmethod\n    def get_updater_name():\n        return \"Hangar\"\n\n    @staticmethod\n    def get_config_path():\n        return \"hangar\"\n\n    @staticmethod\n    def get_updater_version():\n        return \"1.0\"\n\n    @staticmethod\n    def get_config_schema():\n        return PluginUpdaterConfigSchema(\n            plugin_schema=sy.Map(\n                {\n                    \"id\": sy.EmptyNone() | sy.Str(),\n                    \"platform\": sy.EmptyNone() | PlatformType(),\n                    \"channel\": Channel(),\n                }\n            ),\n            plugin_default=\"\"\"\\\n                # id: example https://hangar.papermc.io/[author]/[your project id here]\n                # platform: one of these, paper, waterfall, velocity\n                # channel: update channel # release, snapshot, alpha\n                id:\n                platform: paper\n                channel: release\n            \"\"\",\n        )\n\n    def _get_update_data(self, project_id: str, channel: str):\n        headers = {\"Accept\": \"text/plain\"}\n        res = self.make_requests(\n            self.make_url(\n                self.api, project_id, \"latest\", channel=channel.lower().capitalize()\n            ),\n            headers=headers,\n        )\n        if not self.check_content_type(res, \"text/plain\"):\n            return\n\n        latest_version = res.read().decode().strip()\n        headers = {\"Accept\": \"application/json\"}\n        res = self.make_requests(\n            self.make_url(self.api, project_id, \"versions\", latest_version),\n            headers=headers,\n        )\n        if not self.check_content_type(res, \"application/json\"):\n            return\n\n        return json.loads(res.read())\n\n    def get_update(self) -&gt; CommonData | None:\n        project_id: str = self.updater_config.plugin_config[\"id\"]\n        if not project_id:\n            return\n        platform: str = self.updater_config.plugin_config[\"platform\"]\n        if not platform:\n            return\n        channel: str = self.updater_config.plugin_config[\"channel\"]\n        if not channel:\n            return\n\n        update_data = self._get_update_data(project_id, channel)\n        if not update_data:\n            return\n\n        # Compare local and remote versions\n        local_version = self.parse_version(self.plugin_data.version)\n        remote_version = str(update_data[\"name\"])\n        if local_version &gt;= self.parse_version(remote_version):\n            return\n\n        url = self.make_url(\n            self.api,\n            project_id,\n            \"versions\",\n            update_data[\"name\"],\n            platform.upper(),\n            \"download\",\n        )\n        with self.make_requests(url, method=\"HEAD\") as res:\n            if not any(\n                self.check_content_type(res, x)\n                for x in [\n                    \"application/java-archive\",\n                    \"application/octet-stream\",\n                    \"application/zip\",\n                ]\n            ):\n                self.log.error(\n                    f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n                )\n                return\n\n        plugin_data = CommonData(\n            name=self.plugin_data.name,\n            version=remote_version,\n        )\n        plugin_data.set_url(url)\n        return plugin_data\n\n# Register the plugin updater\nplugin_updater_register(HangarUpdater)\n</code></pre> <p>Warning</p> <p>Refer to the implementation in ext_register</p> <p>This approach is as powerful as using <code>exec()</code>, so proceed with caution.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Feel free to open an issue or submit a pull request on GitHub. </p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GNU General Public License version 3. See the <code>LICENSE</code> file for more information.</p>"},{"location":"#todo","title":"TODO","text":"<ul> <li> Update documentation</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#002-2024-11-09","title":"0.0.2 - 2024-11-09","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li><code>packaging</code> library not included as dependencies (7360b8c)</li> <li>Settings.update_order not generated at first run (891298f)</li> <li>Minor fix for plugin updater related to version (523fcc6)</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Update related to docs (2c42619)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous-tasks","title":"Miscellaneous Tasks","text":"<ul> <li>Update <code>README.md</code> (5077405)</li> <li>Add log.info when loading config (dec5f0b)</li> <li>Add log.info when loading config (879bb84)</li> </ul>"},{"location":"CHANGELOG/#bump","title":"Bump","text":"<ul> <li>Version 0.0.1 -&gt; 0.0.2 ()</li> </ul>"},{"location":"CHANGELOG/#001-2024-11-09","title":"0.0.1 - 2024-11-09","text":""},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Update mkdocs (27c9e24)</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Well, this is actually full code in one commit (0ec0a16)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous-tasks_1","title":"Miscellaneous Tasks","text":"<ul> <li>Update <code>.gitignore</code> (092e7d6)</li> <li>Update <code>.gitignore</code> (b2d758e)</li> <li>Update <code>README.md</code> (afa5773)</li> </ul>"},{"location":"CHANGELOG/#bump_1","title":"Bump","text":"<ul> <li>Version - -&gt; 0.0.1 (59207a7)</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>cupang_updater<ul> <li>cmd_opts</li> <li>config<ul> <li>config</li> <li>default</li> <li>schema</li> </ul> </li> <li>downloader<ul> <li>downloader</li> <li>progress</li> </ul> </li> <li>logger<ul> <li>logger</li> </ul> </li> <li>main</li> <li>manager<ul> <li>external</li> <li>plugin</li> <li>server</li> </ul> </li> <li>meta</li> <li>rich</li> <li>task<ul> <li>scan</li> <li>update</li> </ul> </li> <li>updater<ul> <li>base</li> <li>common_api<ul> <li>github</li> <li>jenkins</li> </ul> </li> <li>plugin<ul> <li>base</li> <li>bukkit</li> <li>custom</li> <li>github</li> <li>hangar</li> <li>jenkins</li> <li>modrinth</li> <li>spigot</li> </ul> </li> <li>server<ul> <li>base</li> <li>bungee</li> <li>custom</li> <li>paper</li> <li>purpur</li> </ul> </li> </ul> </li> <li>utils<ul> <li>common</li> <li>config</li> <li>date</li> <li>hash</li> <li>jar</li> <li>url</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cupang_updater/cmd_opts/","title":"cmd_opts","text":""},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.is_compiled","title":"is_compiled  <code>module-attribute</code>","text":"<pre><code>is_compiled = (\n    hasattr(sys, \"_MEIPASS\")\n    or getattr(sys, \"frozen\", False)\n    or \"__compiled__\" in globals()\n)\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.cwd","title":"cwd  <code>module-attribute</code>","text":"<pre><code>cwd = parent if is_compiled else cwd()\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.opt","title":"opt  <code>module-attribute</code>","text":"<pre><code>opt = ArgumentParser(\n    app_name,\n    description=f\"{app_name} {app_version}\nA Minecraft Server/Plugin Updater\",\n)\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.opt_main","title":"opt_main  <code>module-attribute</code>","text":"<pre><code>opt_main = add_argument_group('Main')\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.opt_config","title":"opt_config  <code>module-attribute</code>","text":"<pre><code>opt_config = add_argument_group('Config')\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.opt_extra","title":"opt_extra  <code>module-attribute</code>","text":"<pre><code>opt_extra = add_argument_group('Extra')\n</code></pre>"},{"location":"reference/cupang_updater/cmd_opts/#cupang_updater.cmd_opts.opt_downloader","title":"opt_downloader  <code>module-attribute</code>","text":"<pre><code>opt_downloader = add_argument_group('Downloader')\n</code></pre>"},{"location":"reference/cupang_updater/main/","title":"main","text":""},{"location":"reference/cupang_updater/main/#cupang_updater.main.main","title":"main","text":"<pre><code>main()\n</code></pre> Source code in <code>src\\cupang_updater\\main.py</code> <pre><code>def main():\n    cmd_args = opt.parse_args()\n    appdir = AppDir(cmd_args.config_dir, cmd_args.config_path)\n\n    for x in [\n        appdir.base_dir,\n        appdir.ext_updater_path,\n        appdir.logs_path,\n    ]:\n        x.mkdir(parents=True, exist_ok=True)\n\n    setup_logger(appdir.logs_path, cmd_args.debug)\n    setup_downloader(cmd_args)\n\n    server_updater_register(PurpurUpdater)\n    server_updater_register(PaperUpdater)\n    server_updater_register(BungeeUpdater)\n    server_updater_register(CustomUrlServerUpdater)\n\n    plugin_updater_register(CustomUrlPluginUpdater)\n    plugin_updater_register(BukkitUpdater)\n    plugin_updater_register(SpigotUpdater)\n    plugin_updater_register(HangarUpdater)\n    plugin_updater_register(ModrinthUpdater)\n    plugin_updater_register(GithubUpdater)\n    plugin_updater_register(JenkinsUpdater)\n\n    ext_register(appdir.ext_updater_path)\n\n    log = get_logger()\n    log.info(\"Loading config\")\n    config = Config()\n    config.load(appdir.config_path)\n    if not config.get(\"settings.server_folder\").data:\n        while True:\n            server_folder = Prompt.ask(\n                \"Enter server folder (i.e. /home/username/server)\", console=console\n            )\n            server_folder = Path(server_folder).expanduser().absolute()\n            if server_folder.exists():\n                config.set(\"settings.server_folder\", server_folder.as_posix())\n                break\n            log.error(\"Invalid server folder, is folder exists?\")\n    if not config.get(\"settings.update_order\").data:\n        config.set(\"settings.update_order\", list(get_plugin_updaters().keys()))\n    else:\n        update_order = config.get(\"settings.update_order\").data\n        update_order = [x for x in update_order if x in get_plugin_updaters().keys()]\n        update_order.extend(\n            [x for x in get_plugin_updaters().keys() if x not in update_order]\n        )\n    fix_config(\n        config.strictyaml[\"updater_settings\"][\"server\"],\n        get_server_updater_settings_default(),\n        \"Updater Settings Server\",\n    )\n    fix_config(\n        config.strictyaml[\"updater_settings\"][\"plugin\"],\n        get_plugin_updater_settings_default(),\n        \"Updater Settings Plugin\",\n    )\n    update_server_type(config, get_server_types())\n    config.save()\n    config.reload()\n\n    if cmd_args.scan_only:\n        scan_plugins(config)\n    else:\n        scan_plugins(config)\n        update_all(config, cmd_args)\n</code></pre>"},{"location":"reference/cupang_updater/meta/","title":"meta","text":""},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.app_name","title":"app_name  <code>module-attribute</code>","text":"<pre><code>app_name = 'cupang-updater'\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.app_version","title":"app_version  <code>module-attribute</code>","text":"<pre><code>app_version = __version__\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.default_headers","title":"default_headers  <code>module-attribute</code>","text":"<pre><code>default_headers = {\n    \"User-Agent\": f\"{app_name}/{app_version}\"\n}\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.stop_event","title":"stop_event  <code>module-attribute</code>","text":"<pre><code>stop_event = Event()\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir","title":"AppDir  <code>dataclass</code>","text":"<pre><code>AppDir(base_dir, config_path=None)\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir.config_path","title":"config_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>config_path = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir.ext_updater_path","title":"ext_updater_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ext_updater_path = field(init=False)\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir.logs_path","title":"logs_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logs_path = field(init=False)\n</code></pre>"},{"location":"reference/cupang_updater/meta/#cupang_updater.meta.AppDir.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\meta.py</code> <pre><code>def __post_init__(self):\n    self.config_path = (\n        (self.base_dir / \"config.yaml\")\n        if not self.config_path\n        else self.config_path\n    )\n    self.ext_updater_path = self.base_dir / \"ext_updater\"\n    self.logs_path = self.base_dir / \"logs\"\n</code></pre>"},{"location":"reference/cupang_updater/rich/","title":"rich","text":""},{"location":"reference/cupang_updater/rich/#cupang_updater.rich.console","title":"console  <code>module-attribute</code>","text":"<pre><code>console = Console(tab_size=4)\n</code></pre>"},{"location":"reference/cupang_updater/rich/#cupang_updater.rich.get_rich_status","title":"get_rich_status","text":"<pre><code>get_rich_status()\n</code></pre> Source code in <code>src\\cupang_updater\\rich.py</code> <pre><code>def get_rich_status():\n    return Status(\"...\", console=console)\n</code></pre>"},{"location":"reference/cupang_updater/rich/#cupang_updater.rich.get_rich_live","title":"get_rich_live","text":"<pre><code>get_rich_live(*renderable)\n</code></pre> Source code in <code>src\\cupang_updater\\rich.py</code> <pre><code>def get_rich_live(*renderable):\n    return Live(Group(*renderable), console=console, transient=True)\n</code></pre>"},{"location":"reference/cupang_updater/config/config/","title":"config","text":""},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config","title":"Config","text":"<pre><code>Config()\n</code></pre> <p>Initialize the configuration.</p> ATTRIBUTE DESCRIPTION <code>_config_path</code> <p>The path to the configuration file.</p> <p> TYPE: <code>Path</code> </p> <code>_config</code> <p>The raw configuration as a strictyaml object.</p> <p> TYPE: <code>YAML</code> </p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the configuration.\n\n    Attributes:\n        _config_path (Path): The path to the configuration file.\n        _config (sy.YAML): The raw configuration as a strictyaml object.\n    \"\"\"\n    self._config_path: Path = None\n    self._config: sy.YAML = None\n</code></pre>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.data","title":"data  <code>property</code>","text":"<pre><code>data\n</code></pre> <p>Get the data as a dictionary</p>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.strictyaml","title":"strictyaml  <code>property</code>","text":"<pre><code>strictyaml\n</code></pre> <p>Get the raw strictyaml object</p>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.load","title":"load","text":"<pre><code>load(file=None, _default=default_config)\n</code></pre> <p>Load configuration from a file.</p> PARAMETER DESCRIPTION <code>file</code> <p>The path to the configuration file. If not provided, use the default configuration.</p> <p> TYPE: <code>str | Path</code> DEFAULT: <code>None</code> </p> <code>_default</code> <p>The default configuration as a string. If not provided, use the default configuration.</p> <p> TYPE: <code>str</code> DEFAULT: <code>default_config</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>If the file does not exist and no default configuration is provided.</p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def load(self, file: str | Path = None, _default: str = default_config):\n    \"\"\"Load configuration from a file.\n\n    Args:\n        file: The path to the configuration file. If not provided, use the default configuration.\n        _default: The default configuration as a string. If not provided, use the default configuration.\n\n    Raises:\n        FileNotFoundError: If the file does not exist and no default configuration is provided.\n    \"\"\"\n    file = ensure_path(file) if file else None\n    self._config_path = file\n    if file.exists():\n        yaml_string = file.read_text(encoding=\"utf-8\")\n    else:\n        if _default:\n            yaml_string = _default\n        else:\n            raise FileNotFoundError(\n                f\"Config file not found at {file} and default value not set\"\n            )\n    self._config = sy.load(yaml_string, get_config_schema())\n</code></pre>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Reload the configuration from the file where it was previously loaded from.</p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def reload(self):\n    \"\"\"\n    Reload the configuration from the file where it was previously loaded from.\n    \"\"\"\n\n    self.load(self._config_path)\n</code></pre>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.save","title":"save","text":"<pre><code>save(file=None)\n</code></pre> <p>Save the current configuration to a file.</p> PARAMETER DESCRIPTION <code>file</code> <p>The path to the file where the configuration should be saved. If not provided, saves to the previously loaded configuration path.</p> <p> TYPE: <code>str | Path</code> DEFAULT: <code>None</code> </p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def save(self, file: str | Path = None):\n    \"\"\"\n    Save the current configuration to a file.\n\n    Args:\n        file (str | Path, optional): The path to the file where the configuration\n            should be saved. If not provided, saves to the previously loaded configuration path.\n    \"\"\"\n    file = ensure_path(file) if file else self._config_path\n    file.write_text(self._config.as_yaml(), encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.set","title":"set","text":"<pre><code>set(path, value)\n</code></pre> <p>Set the value using path.to.key</p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def set(self, path: str, value: Any):\n    \"\"\"\n    Set the value using path.to.key\n    \"\"\"\n    if not path:\n        return\n    if isinstance(value, sy.YAML):\n        if not value.data:\n            return\n    elif not value:\n        return\n\n    current = self._config\n    *initial_keys, last_key = path.split(\".\")\n\n    for key in initial_keys:\n        if not current.is_mapping() or key not in current:\n            break\n        current = current[key]\n\n    current[last_key] = value\n</code></pre>"},{"location":"reference/cupang_updater/config/config/#cupang_updater.config.config.Config.get","title":"get","text":"<pre><code>get(path, default=None)\n</code></pre> <p>Get the value using path.to.value</p> <p>It's recommended to put default as YAML object</p> Source code in <code>src\\cupang_updater\\config\\config.py</code> <pre><code>def get(self, path: str, default: Any = None) -&gt; sy.YAML | Any:\n    \"\"\"\n    Get the value using path.to.value\n\n    It's recommended to put default as YAML object\n    \"\"\"\n    if path == \".\":\n        return self.config\n\n    # mask default to return sy.YAML object\n    if default is None:\n        default = sy.YAML(default, sy.EmptyNone())\n\n    current = self._config\n    keys = path.split(\".\")\n\n    for key in keys:\n        if not current.is_mapping() or key not in current:\n            break\n        current = current[key]\n\n    if current is None or current.data is None:\n        return default\n    return current\n</code></pre>"},{"location":"reference/cupang_updater/config/default/","title":"default","text":""},{"location":"reference/cupang_updater/config/default/#cupang_updater.config.default.default_config","title":"default_config  <code>module-attribute</code>","text":"<pre><code>default_config = '#\\n# *  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n# * \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n# * \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\\n# * \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\\n# * \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n# *  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\n# *\\n# * \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n# * \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n# * \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n# * \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n# * \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\\n# *  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\\n#\\n#\\n\\nlast_update:\\n\\nsettings:\\n  server_folder:\\n  update_cooldown: 12 # in hour\\n  keep_removed: true # set to false if you want to remove \"removed\" plugins in config\\n  update_order: # top to bottom\\nupdater_settings:\\n  # If updater have common configuration (i.e. a token) it will be shown here\\n  server:\\n  plugin:\\nserver:\\n  enable: false # true if you want to auto update the server\\n  file: server.jar\\n  type: bungee\\n  version: 1.19.4 # a version number like 1.20.4\\n  build_number: # if you change server.version, empty this\\n  custom_url: # only when server.type is set to custom \\n  hashes:\\n    md5:\\n    sha1:\\n    sha256:\\n    sha512:\\nplugins:\\n'\n</code></pre>"},{"location":"reference/cupang_updater/config/default/#cupang_updater.config.default.default_plugin","title":"default_plugin  <code>module-attribute</code>","text":"<pre><code>default_plugin = \"exclude: false # exclude plugin from update checker\\nfile:\\nversion:\\nauthors:\\nhashes: # auto generated\\n  md5:\\n  sha1:\\n  sha256:\\n  sha512:\\n\"\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/","title":"schema","text":""},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.ServerType","title":"ServerType","text":"<pre><code>ServerType()\n</code></pre> <p>               Bases: <code>Str</code></p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def __init__(self):\n    self.server_types = []\n    super().__init__()\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.ServerType.server_types","title":"server_types  <code>instance-attribute</code>","text":"<pre><code>server_types = []\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.ServerType.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def validate_scalar(self, chunk):\n    val = chunk.contents\n    if val.lower() not in self.server_types:\n        chunk.expecting_but_found(f\"when expecting one of {self.server_types}\")\n    return super().validate_scalar(chunk)\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.ServerType.update_server_type","title":"update_server_type","text":"<pre><code>update_server_type(server_type)\n</code></pre> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def update_server_type(self, server_type: str):\n    self.server_types.append(server_type)\n    # make it unique\n    self.server_types = list(sorted(list(set(self.server_types))))\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.NonEmptyStr","title":"NonEmptyStr","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.NonEmptyStr.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def validate_scalar(self, chunk):\n    if chunk.contents == \"\":\n        chunk.expecting_but_found(\"when expecting some string\")\n    return chunk.contents\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.get_server_updater_settings_schema","title":"get_server_updater_settings_schema","text":"<pre><code>get_server_updater_settings_schema()\n</code></pre> <p>Get the schema for the server updater settings.</p> RETURNS DESCRIPTION <code>dict[str, MapValidator]</code> <p>dict[str, MapValidator]: A dictionary where the key is the path in the settings and the value is the schema for that path.</p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def get_server_updater_settings_schema() -&gt; dict[str, MapValidator]:\n    \"\"\"\n    Get the schema for the server updater settings.\n\n    Returns:\n        dict[str, MapValidator]: A dictionary where the key is the path in the settings and the value is the schema for that path.\n    \"\"\"\n    return _server_updater_settings_schema\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.get_plugin_updater_settings_schema","title":"get_plugin_updater_settings_schema","text":"<pre><code>get_plugin_updater_settings_schema()\n</code></pre> <p>Get the schema for the plugin updater settings.</p> RETURNS DESCRIPTION <code>dict[str, MapValidator]</code> <p>dict[str, MapValidator]: A dictionary where the key is the path in the settings and the value is the schema for that path.</p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def get_plugin_updater_settings_schema() -&gt; dict[str, MapValidator]:\n    \"\"\"\n    Get the schema for the plugin updater settings.\n\n    Returns:\n        dict[str, MapValidator]: A dictionary where the key is the path in the settings and the value is the schema for that path.\n    \"\"\"\n    return _plugin_updater_settings_schema\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.get_server_schema","title":"get_server_schema","text":"<pre><code>get_server_schema()\n</code></pre> <p>Get the schema for the server configuration.</p> RETURNS DESCRIPTION <code>dict[str, Validator]</code> <p>dict[str, sy.Validator]: A dictionary where the key is the server configuration field and the value is the corresponding validator.</p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def get_server_schema() -&gt; dict[str, sy.Validator]:\n    \"\"\"\n    Get the schema for the server configuration.\n\n    Returns:\n        dict[str, sy.Validator]: A dictionary where the key is the server configuration field and the value is the corresponding validator.\n    \"\"\"\n    return _server_schema\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.get_plugin_schema","title":"get_plugin_schema","text":"<pre><code>get_plugin_schema()\n</code></pre> <p>Get the schema for the plugin configuration.</p> RETURNS DESCRIPTION <code>dict[str, Validator]</code> <p>dict[str, sy.Validator]: A dictionary where the key is the plugin configuration field and the value is the corresponding validator.</p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def get_plugin_schema() -&gt; dict[str, sy.Validator]:\n    \"\"\"\n    Get the schema for the plugin configuration.\n\n    Returns:\n        dict[str, sy.Validator]: A dictionary where the key is the plugin configuration field and the value is the corresponding validator.\n    \"\"\"\n\n    return _plugin_schema\n</code></pre>"},{"location":"reference/cupang_updater/config/schema/#cupang_updater.config.schema.get_config_schema","title":"get_config_schema","text":"<pre><code>get_config_schema()\n</code></pre> <p>Get the complete configuration schema.</p> RETURNS DESCRIPTION <code>Map</code> <p>sy.Map: A strictyaml Map validator that contains the schema for</p> <code>Map</code> <p>the configuration fields, including 'last_update', 'settings',</p> <code>Map</code> <p>'updater_settings', 'server', and 'plugins'.</p> Source code in <code>src\\cupang_updater\\config\\schema.py</code> <pre><code>def get_config_schema() -&gt; sy.Map:\n    \"\"\"\n    Get the complete configuration schema.\n\n    Returns:\n        sy.Map: A strictyaml Map validator that contains the schema for\n        the configuration fields, including 'last_update', 'settings',\n        'updater_settings', 'server', and 'plugins'.\n    \"\"\"\n    return sy.Map(\n        {\n            \"last_update\": _last_update_schema,\n            \"settings\": sy.Map(_settings_schema),\n            # updater_settings is dynamic\n            \"updater_settings\": sy.Map(\n                {\n                    # using sy.MapCombined as a safe guard in case the updater is fail to register\n                    \"server\": sy.EmptyDict()\n                    | sy.MapCombined(\n                        _server_updater_settings_schema,\n                        sy.Str(),\n                        sy.EmptyNone() | sy.Any(),\n                    ),\n                    \"plugin\": sy.EmptyDict()\n                    | sy.MapCombined(\n                        _plugin_updater_settings_schema,\n                        sy.Str(),\n                        sy.EmptyNone() | sy.Any(),\n                    ),\n                }\n            ),\n            \"server\": sy.Map(_server_schema),\n            # plugin is dynamic\n            \"plugins\": sy.EmptyDict()\n            | sy.MapPattern(\n                sy.Str(),\n                # using sy.MapCombined as a safe guard in case the updater is fail to register\n                sy.MapCombined(\n                    _plugin_schema,\n                    sy.Str(),\n                    sy.EmptyNone() | sy.Any(),\n                ),\n            ),\n        }\n    )\n</code></pre>"},{"location":"reference/cupang_updater/downloader/downloader/","title":"downloader","text":""},{"location":"reference/cupang_updater/downloader/downloader/#cupang_updater.downloader.downloader.setup_downloader","title":"setup_downloader","text":"<pre><code>setup_downloader(opt)\n</code></pre> <p>Set up the downloader.</p> PARAMETER DESCRIPTION <code>opt</code> <p>The parsed command line arguments.</p> <p> TYPE: <code>Namespace</code> </p> RAISES DESCRIPTION <code>Exception</code> <p>If the specified downloader is not supported, or if the downloader setup fails, a fallback is used.</p> Source code in <code>src\\cupang_updater\\downloader\\downloader.py</code> <pre><code>def setup_downloader(opt):\n    \"\"\"\n    Set up the downloader.\n\n    Args:\n        opt (argparse.Namespace): The parsed command line arguments.\n\n    Raises:\n        Exception: If the specified downloader is not supported, or if the\n            downloader setup fails, a fallback is used.\n    \"\"\"\n\n    global _downloader\n    log = get_logger()\n    if _downloader:\n        log.warning(\"Downloader already setup\")\n        return\n    try:\n        match opt.downloader:\n            case \"aria2c\":\n                log.info(\"Setup aria2c downloader\")\n                from cupang_downloader.downloaders.aria2_downloader import (\n                    Aria2Downloader,\n                )\n\n                _downloader = Downloader(\n                    Aria2Downloader(aria2c_bin=opt.aria2c_bin, cancel_event=stop_event)\n                )\n            case \"wget\":\n                log.info(\"Setup wget downloader\")\n                from cupang_downloader.downloaders.wget_downloader import WgetDownloader\n\n                _downloader = Downloader(\n                    WgetDownloader(wget_bin=opt.wget_bin, cancel_event=stop_event)\n                )\n            case \"curl\":\n                log.info(\"Setup curl downloader\")\n                from cupang_downloader.downloaders.curl_downloader import CurlDownloader\n\n                _downloader = Downloader(\n                    CurlDownloader(curl_bin=opt.curl_bin, cancel_event=stop_event)\n                )\n            case \"pycurl\":\n                log.info(\"Setup pycurl downloader\")\n                from cupang_downloader.downloaders.pycurl_downloader import (\n                    PycurlDownloader,\n                )\n\n                _downloader = Downloader(PycurlDownloader(cancel_event=stop_event))\n            case \"requests\":\n                log.info(\"Setup requests downloader\")\n                from cupang_downloader.downloaders.requests_downloader import (\n                    RequestsDownloader,\n                )\n\n                _downloader = Downloader(RequestsDownloader(cancel_event=stop_event))\n            case _:\n                log.warning(f\"Unsupported downloader: {opt.downloader}\")\n                _setup_fallback_downloader()\n    except Exception as e:\n        log.error(\n            f\"Failed to setup downloader {opt.downloader} because {type(e).__qualname__}: {e}\"\n        )\n        _setup_fallback_downloader()\n</code></pre>"},{"location":"reference/cupang_updater/downloader/downloader/#cupang_updater.downloader.downloader.get_downloader","title":"get_downloader","text":"<pre><code>get_downloader()\n</code></pre> <p>Retrieve the Downloader instance.</p> <p>If the Downloader instance has not been set up yet, a RuntimeError is raised.</p> RETURNS DESCRIPTION <code>Downloader</code> <p>The Downloader instance.</p> <p> TYPE: <code>Downloader</code> </p> Source code in <code>src\\cupang_updater\\downloader\\downloader.py</code> <pre><code>def get_downloader() -&gt; Downloader:\n    \"\"\"\n    Retrieve the Downloader instance.\n\n    If the Downloader instance has not been set up yet, a RuntimeError is raised.\n\n    Returns:\n        Downloader: The Downloader instance.\n    \"\"\"\n    if not isinstance(_downloader, Downloader):\n        raise RuntimeError(\"Downloader is not initialized\")\n    return _downloader\n</code></pre>"},{"location":"reference/cupang_updater/downloader/progress/","title":"progress","text":""},{"location":"reference/cupang_updater/downloader/progress/#cupang_updater.downloader.progress.get_callbacks","title":"get_callbacks","text":"<pre><code>get_callbacks()\n</code></pre> <p>Retrieve a dictionary of callback functions for download events.</p> RETURNS DESCRIPTION <code>dict[str, Callable]</code> <p>dict[str, Callable]: A dictionary containing callback functions for various download events, including start, finish, progress, cancel, and error.</p> Source code in <code>src\\cupang_updater\\downloader\\progress.py</code> <pre><code>def get_callbacks() -&gt; dict[str, Callable]:\n    \"\"\"\n    Retrieve a dictionary of callback functions for download events.\n\n    Returns:\n        dict[str, Callable]: A dictionary containing callback functions for various\n            download events, including start, finish, progress,\n            cancel, and error.\n    \"\"\"\n    return dict(\n        on_start=_on_start,\n        on_finish=_on_finish,\n        on_progress=_on_progress,\n        on_cancel=_on_cancel,\n        on_error=_on_error,\n    )\n</code></pre>"},{"location":"reference/cupang_updater/downloader/progress/#cupang_updater.downloader.progress.get_progress","title":"get_progress","text":"<pre><code>get_progress()\n</code></pre> <p>Get the shared progress bar.</p> RETURNS DESCRIPTION <code>Progress</code> <p>The shared progress bar.</p> <p> TYPE: <code>Progress</code> </p> Source code in <code>src\\cupang_updater\\downloader\\progress.py</code> <pre><code>def get_progress() -&gt; Progress:\n    \"\"\"\n    Get the shared progress bar.\n\n    Returns:\n        Progress: The shared progress bar.\n    \"\"\"\n    return _progress\n</code></pre>"},{"location":"reference/cupang_updater/logger/logger/","title":"logger","text":""},{"location":"reference/cupang_updater/logger/logger/#cupang_updater.logger.logger.LogFormatting","title":"LogFormatting","text":"<p>               Bases: <code>Formatter</code></p> <p>A formatter that adds a color prefix to the log message depending on the log level.</p> <p>If the <code>no_color</code> attribute is set to True, the color prefix will be removed from the message.</p> ATTRIBUTE DESCRIPTION <code>colors</code> <p>A dictionary of log levels to color prefixes.</p> <p> TYPE: <code>dict</code> </p> <code>no_color</code> <p>Whether to add a color prefix to the message. Defaults to False.</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>format</code> <p>logging.LogRecord) -&gt; str: Format the message of the log record.</p>"},{"location":"reference/cupang_updater/logger/logger/#cupang_updater.logger.logger.LogFormatting.colors","title":"colors  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>colors = {\n    CRITICAL: \"[bold black on red]\",\n    ERROR: \"[bold red on default]\",\n    WARNING: \"[yellow on default]\",\n    INFO: \"[default on default]\",\n    DEBUG: \"[green on default]\",\n}\n</code></pre>"},{"location":"reference/cupang_updater/logger/logger/#cupang_updater.logger.logger.LogFormatting.format","title":"format","text":"<pre><code>format(record)\n</code></pre> <p>Format the message of the log record.</p> <p>The formatter will add a color prefix to the message depending on the log level. If the logger name is not the root logger, it will be added to the message in the format of \"[logger.name] message\" with a bright blue color.</p> <p>If the <code>no_color</code> attribute is set to True, the color prefix will be removed from the message.</p> Source code in <code>src\\cupang_updater\\logger\\logger.py</code> <pre><code>def format(self, record: logging.LogRecord) -&gt; str:\n    \"\"\"\n    Format the message of the log record.\n\n    The formatter will add a color prefix to the message depending on the log level.\n    If the logger name is not the root logger, it will be added to the message in the format\n    of \"[logger.name] message\" with a bright blue color.\n\n    If the `no_color` attribute is set to True, the color prefix will be removed from the message.\n    \"\"\"\n    no_color = getattr(self, \"no_color\", False)\n    color_prefix = self.colors.get(record.levelno, \"[default on default]\")\n    msg_orig = self._remove_prefix(str(record.msg))\n    record.msg = self._add_prefix(str(record.msg), color_prefix)\n\n    # Add the logger name to the message if it is not the root logger\n    names = record.name.split(\".\")[1:]\n    if names:\n        record.msg = self._add_prefix(\n            escape(\"[\" + \"/\".join(names) + \"] \") + record.msg,\n            \"[bright_blue on default]\" if not no_color else \"\",\n        )\n\n    # Remove color prefix from the message if no_color is True\n    if no_color:\n        record.msg = msg_orig\n\n    return super().format(record)\n</code></pre>"},{"location":"reference/cupang_updater/logger/logger/#cupang_updater.logger.logger.setup_logger","title":"setup_logger","text":"<pre><code>setup_logger(logs_path, debug=False)\n</code></pre> <p>Set up and configure the logger for the application.</p> PARAMETER DESCRIPTION <code>logs_path</code> <p>The directory path where log files are stored.</p> <p> TYPE: <code>Path</code> </p> Source code in <code>src\\cupang_updater\\logger\\logger.py</code> <pre><code>def setup_logger(logs_path: Path, debug: bool = False) -&gt; None:\n    \"\"\"\n    Set up and configure the logger for the application.\n\n    Args:\n        logs_path (Path): The directory path where log files are stored.\n    \"\"\"\n    current_date = datetime.now().date()\n\n    _rename_latest_log(logs_path)\n    _compress_old_logs(logs_path)\n\n    logger = logging.getLogger(app_name)\n    logger.setLevel(logging.DEBUG)\n\n    stream_handler = RichHandler(\n        console=console,\n        rich_tracebacks=True,\n        markup=True,\n        show_path=False,\n    )\n    file_handler = RichHandler(\n        console=type(console)(\n            file=(logs_path / \"latest.log\").open(\"a\", encoding=\"utf-8\"),\n            tab_size=console.tab_size,\n            width=88,\n            no_color=True,\n        ),\n        rich_tracebacks=True,\n        markup=True,\n    )\n\n    log_formatter = LogFormatting(\"%(message)s\", datefmt=\"%X\")\n    file_formatter = LogFormatting(\"%(message)s\", datefmt=\"%X\")\n    file_formatter._set_nocolor()\n\n    stream_handler.setLevel(logging.INFO if not debug else logging.DEBUG)\n    stream_handler.setFormatter(log_formatter)\n    file_handler.setLevel(logging.DEBUG)\n    file_handler.setFormatter(file_formatter)\n\n    logger.addHandler(stream_handler)\n    logger.addHandler(file_handler)\n\n    logger.info(f\"Logger created at {current_date.strftime(_date_format)}\")\n\n    global _logger\n    _logger = logger\n</code></pre>"},{"location":"reference/cupang_updater/logger/logger/#cupang_updater.logger.logger.get_logger","title":"get_logger","text":"<pre><code>get_logger()\n</code></pre> <p>Return the logger instance.</p> <p>The logger is created by calling <code>setup_logger</code>. If the logger is not initialized, a RuntimeError is raised.</p> <p>Returns: - logging.Logger: The logger instance.</p> Source code in <code>src\\cupang_updater\\logger\\logger.py</code> <pre><code>def get_logger() -&gt; logging.Logger:\n    \"\"\"Return the logger instance.\n\n    The logger is created by calling `setup_logger`. If the logger is not\n    initialized, a RuntimeError is raised.\n\n    Returns:\n    - logging.Logger: The logger instance.\n    \"\"\"\n    if _logger is None:\n        raise RuntimeError(\"Logger not initialized\")\n    return _logger\n</code></pre>"},{"location":"reference/cupang_updater/manager/external/","title":"external","text":""},{"location":"reference/cupang_updater/manager/external/#cupang_updater.manager.external.ext_register","title":"ext_register","text":"<pre><code>ext_register(*ext_paths)\n</code></pre> <p>Register external updaters.</p> PARAMETER DESCRIPTION <code>*ext_paths</code> <p>str or Path, the paths to the python files containing the external updaters</p> <p> TYPE: <code>str | Path</code> DEFAULT: <code>()</code> </p> Source code in <code>src\\cupang_updater\\manager\\external.py</code> <pre><code>def ext_register(*ext_paths: str | Path):\n    \"\"\"\n    Register external updaters.\n\n    Args:\n        *ext_paths: str or Path, the paths to the python files containing the external updaters\n    \"\"\"\n    global _is_registered\n    log = get_logger()\n    if _is_registered:\n        log.warning(\"Ext already registered\")\n        return\n\n    for path in chain.from_iterable(x.glob(\"*\") for x in ext_paths):\n        try:\n            if len(path.suffixes) == 1 and path.suffix == \".py\":\n                sys.path.append(str(path.parent.absolute()))\n                _load_ext(f\"ext_updater.{remove_suffix(path).name}\", path)\n        except Exception:\n            log.exception(f'Exception occur when trying to register \"{path}\"')\n\n    sys.path[:] = list(set(sys.path))\n    _is_registered = True\n</code></pre>"},{"location":"reference/cupang_updater/manager/plugin/","title":"plugin","text":""},{"location":"reference/cupang_updater/manager/plugin/#cupang_updater.manager.plugin.get_plugin_updater_settings_default","title":"get_plugin_updater_settings_default","text":"<pre><code>get_plugin_updater_settings_default()\n</code></pre> <p>Retrieve the default plugin updater settings.</p> RETURNS DESCRIPTION <code>YAML</code> <p>sy.YAML: A deepcopy of the default plugin updater settings.</p> Source code in <code>src\\cupang_updater\\manager\\plugin.py</code> <pre><code>def get_plugin_updater_settings_default() -&gt; sy.YAML:\n    \"\"\"Retrieve the default plugin updater settings.\n\n    Returns:\n        sy.YAML: A deepcopy of the default plugin updater settings.\n    \"\"\"\n    return deepcopy([_default[\"plugin_updater_settings\"]])[0]\n</code></pre>"},{"location":"reference/cupang_updater/manager/plugin/#cupang_updater.manager.plugin.get_plugin_default","title":"get_plugin_default","text":"<pre><code>get_plugin_default()\n</code></pre> <p>Retrieve the default plugin configuration.</p> RETURNS DESCRIPTION <code>YAML</code> <p>sy.YAML: A deepcopy of the default plugin configuration.</p> Source code in <code>src\\cupang_updater\\manager\\plugin.py</code> <pre><code>def get_plugin_default() -&gt; sy.YAML:\n    \"\"\"Retrieve the default plugin configuration.\n\n    Returns:\n        sy.YAML: A deepcopy of the default plugin configuration.\n    \"\"\"\n    return deepcopy([_default[\"plugin\"]])[0]\n</code></pre>"},{"location":"reference/cupang_updater/manager/plugin/#cupang_updater.manager.plugin.get_plugin_updater","title":"get_plugin_updater","text":"<pre><code>get_plugin_updater(config_path)\n</code></pre> <p>Retrieve the plugin updater class for a given configuration path.</p> PARAMETER DESCRIPTION <code>config_path</code> <p>The configuration path to look up.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>type[PluginUpdater] | None</code> <p>type[PluginUpdater] | None: The plugin updater class if found,                         otherwise None.</p> Source code in <code>src\\cupang_updater\\manager\\plugin.py</code> <pre><code>def get_plugin_updater(config_path: str) -&gt; type[PluginUpdater] | None:\n    \"\"\"\n    Retrieve the plugin updater class for a given configuration path.\n\n    Args:\n        config_path (str): The configuration path to look up.\n\n    Returns:\n        type[PluginUpdater] | None: The plugin updater class if found,\n                                    otherwise None.\n    \"\"\"\n    return _updaters.get(config_path)\n</code></pre>"},{"location":"reference/cupang_updater/manager/plugin/#cupang_updater.manager.plugin.get_plugin_updaters","title":"get_plugin_updaters","text":"<pre><code>get_plugin_updaters()\n</code></pre> <p>Retrieve a dictionary of all plugin updaters.</p> RETURNS DESCRIPTION <code>dict[str, type[PluginUpdater]]</code> <p>dict[str, type[PluginUpdater]]: A dictionary of all plugin updaters.</p> Source code in <code>src\\cupang_updater\\manager\\plugin.py</code> <pre><code>def get_plugin_updaters() -&gt; dict[str, type[PluginUpdater]]:\n    \"\"\"Retrieve a dictionary of all plugin updaters.\n\n    Returns:\n        dict[str, type[PluginUpdater]]: A dictionary of all plugin updaters.\n    \"\"\"\n    return _updaters\n</code></pre>"},{"location":"reference/cupang_updater/manager/plugin/#cupang_updater.manager.plugin.plugin_updater_register","title":"plugin_updater_register","text":"<pre><code>plugin_updater_register(plugin_updater)\n</code></pre> <p>Register a plugin updater and updating schemas and default values.</p> PARAMETER DESCRIPTION <code>plugin_updater</code> <p>The plugin updater class to register.</p> <p> TYPE: <code>type[PluginUpdater]</code> </p> Source code in <code>src\\cupang_updater\\manager\\plugin.py</code> <pre><code>def plugin_updater_register(plugin_updater: type[PluginUpdater]):\n    \"\"\"\n    Register a plugin updater and updating schemas and default values.\n\n    Args:\n        plugin_updater (type[PluginUpdater]): The plugin updater class to register.\n\n    \"\"\"\n    log = get_logger()\n    try:\n        updater_name = plugin_updater.get_updater_name()\n        config_path = plugin_updater.get_config_path()\n        version = plugin_updater.get_updater_version()\n        config_schema = plugin_updater.get_config_schema()\n    except NotImplementedError as error:\n        log.exception(f\"Failed to register {plugin_updater}: {error}\")\n        return\n\n    log.info(f\"Registering plugin updater: {updater_name} ({version})\")\n\n    if config_path in _updaters:\n        log.warning(f\"Plugin updater already registered: {updater_name} ({version})\")\n        return\n\n    try:\n        plugin_updater(*_dummy)\n    except Exception:\n        log.exception(f\"Failed to register plugin updater: {updater_name} ({version})\")\n        return\n\n    schema_types = (sy.Map, sy.MapCombined, sy.MapPattern)\n\n    if config_schema.plugin_schema:\n        _update_plugin_schema(config_path, config_schema.plugin_schema)\n        if isinstance(config_schema.plugin_default, str) or isinstance(\n            config_schema.plugin_schema, schema_types\n        ):\n            default_value = reindent(config_schema.plugin_default, 6)\n            yaml_data = sy.load(default_value, config_schema.plugin_schema)\n            _update_plugin_value(config_path, yaml_data)\n        else:\n            _update_plugin_value(config_path, config_schema.plugin_default)\n\n    if config_schema.common_schema:\n        _update_plugin_updater_settings_schema(config_path, config_schema.common_schema)\n        if isinstance(config_schema.common_default, str) or isinstance(\n            config_schema.common_schema, schema_types\n        ):\n            default_value = reindent(config_schema.common_default, 6)\n            yaml_data = sy.load(default_value, config_schema.common_schema)\n            _update_plugin_updater_settings_value(config_path, yaml_data)\n        else:\n            _update_plugin_updater_settings_value(\n                config_path, config_schema.common_default\n            )\n\n    _update_updater(config_path, plugin_updater)\n</code></pre>"},{"location":"reference/cupang_updater/manager/server/","title":"server","text":""},{"location":"reference/cupang_updater/manager/server/#cupang_updater.manager.server.get_server_updater_settings_default","title":"get_server_updater_settings_default","text":"<pre><code>get_server_updater_settings_default()\n</code></pre> <p>Retrieve the default server updater settings.</p> RETURNS DESCRIPTION <code>YAML</code> <p>sy.YAML: A deepcopy of the default server updater settings.</p> Source code in <code>src\\cupang_updater\\manager\\server.py</code> <pre><code>def get_server_updater_settings_default() -&gt; sy.YAML:\n    \"\"\"\n    Retrieve the default server updater settings.\n\n    Returns:\n        sy.YAML: A deepcopy of the default server updater settings.\n    \"\"\"\n    return deepcopy([_default[\"server_updater_settings\"]])[0]\n</code></pre>"},{"location":"reference/cupang_updater/manager/server/#cupang_updater.manager.server.get_server_types","title":"get_server_types","text":"<pre><code>get_server_types()\n</code></pre> <p>Retrieve a list of all server types supported by the registered server updaters.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: A sorted list of all server types supported by the registered server updaters.</p> Source code in <code>src\\cupang_updater\\manager\\server.py</code> <pre><code>def get_server_types() -&gt; list[str]:\n    \"\"\"\n    Retrieve a list of all server types supported by the registered server updaters.\n\n    Returns:\n        list[str]: A sorted list of all server types supported by the registered server updaters.\n    \"\"\"\n    result = list(set(x for y in _updaters.values() for x in y))\n    result.sort()\n    return result\n</code></pre>"},{"location":"reference/cupang_updater/manager/server/#cupang_updater.manager.server.get_server_updaters","title":"get_server_updaters","text":"<pre><code>get_server_updaters(server_type)\n</code></pre> <p>Retrieve a list of all server updaters that support the given server type.</p> PARAMETER DESCRIPTION <code>server_type</code> <p>The server type to retrieve the updaters for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[type[ServerUpdater]]</code> <p>list[type[ServerUpdater]]: A list of all server updaters that support the given server type.</p> Source code in <code>src\\cupang_updater\\manager\\server.py</code> <pre><code>def get_server_updaters(server_type: str) -&gt; list[type[ServerUpdater]]:\n    \"\"\"\n    Retrieve a list of all server updaters that support the given server type.\n\n    Args:\n        server_type (str): The server type to retrieve the updaters for.\n\n    Returns:\n        list[type[ServerUpdater]]: A list of all server updaters that support the given server type.\n    \"\"\"\n    result = list(\n        filter(\n            lambda x: x is not None,\n            map(\n                lambda y: y[0] if server_type in y[1] else None,\n                _updaters.items(),\n            ),\n        )\n    )\n    return result\n</code></pre>"},{"location":"reference/cupang_updater/manager/server/#cupang_updater.manager.server.server_updater_register","title":"server_updater_register","text":"<pre><code>server_updater_register(server_updater)\n</code></pre> <p>Register a server updater and updating schemas and default values.</p> PARAMETER DESCRIPTION <code>server_updater</code> <p>The server updater class to register.</p> <p> TYPE: <code>type[ServerUpdater]</code> </p> Source code in <code>src\\cupang_updater\\manager\\server.py</code> <pre><code>def server_updater_register(server_updater: type[ServerUpdater]):\n    \"\"\"\n    Register a server updater and updating schemas and default values.\n\n    Args:\n        server_updater (type[ServerUpdater]): The server updater class to register.\n\n    \"\"\"\n\n    log = get_logger()\n    try:\n        updater_name = server_updater.get_updater_name()\n        config_path = server_updater.get_config_path()\n        version = server_updater.get_updater_version()\n        config_schema = server_updater.get_config_schema()\n        server_types = server_updater.get_server_types()\n    except NotImplementedError as error:\n        log.exception(f\"Failed to register {server_updater}: {error}\")\n        return\n\n    log.info(f\"Registering server updater: {updater_name} ({version})\")\n\n    if config_path in _updaters:\n        log.warning(f\"Server updater already registered: {updater_name} ({version})\")\n        return\n\n    try:\n        server_updater(*_dummy)\n    except Exception:\n        log.exception(f\"Failed to register server updater: {updater_name} ({version})\")\n        return\n\n    for server_type in server_updater.get_server_types():\n        _update_server_type(server_type)\n\n    schema_types = (sy.Map, sy.MapCombined, sy.MapPattern)\n    if config_schema.common_schema:\n        _update_server_updater_settings_schema(config_path, config_schema.common_schema)\n        if isinstance(config_schema.common_default, str) or isinstance(\n            config_schema.common_schema, schema_types\n        ):\n            default_value = reindent(config_schema.common_default, 2)\n            yaml_data = sy.load(default_value, config_schema.common_schema)\n            _update_server_updater_settings_value(config_path, yaml_data)\n        else:\n            _update_server_updater_settings_value(\n                config_path, config_schema.common_default\n            )\n\n    _update_updater(server_types, server_updater)\n</code></pre>"},{"location":"reference/cupang_updater/task/scan/","title":"scan","text":""},{"location":"reference/cupang_updater/task/scan/#cupang_updater.task.scan.status_update","title":"status_update","text":"<pre><code>status_update(status, msg, level='info', no_log=False)\n</code></pre> Source code in <code>src\\cupang_updater\\task\\scan.py</code> <pre><code>def status_update(status: Status, msg: str, level: str = \"info\", no_log: bool = False):\n    status.update(msg)\n    if no_log:\n        return\n    log = get_logger()\n    getattr(log, level, getattr(log, \"info\"))(msg)\n</code></pre>"},{"location":"reference/cupang_updater/task/scan/#cupang_updater.task.scan.scan_plugins","title":"scan_plugins","text":"<pre><code>scan_plugins(config)\n</code></pre> <p>Scans the plugins directory.</p> <ul> <li>Newly discovered plugins are added to the configuration with default values.</li> <li>Clean up the configuration after the scan.</li> </ul> PARAMETER DESCRIPTION <code>config</code> <p>The configuration object that holds plugin settings.</p> <p> TYPE: <code>Config</code> </p> RAISES DESCRIPTION <code>FileNotFoundError</code> <p>If the plugins folder does not exist.</p> Source code in <code>src\\cupang_updater\\task\\scan.py</code> <pre><code>def scan_plugins(config: Config) -&gt; None:\n    \"\"\"\n    Scans the plugins directory.\n\n    - Newly discovered plugins are added to the configuration with default values.\n    - Clean up the configuration after the scan.\n\n    Args:\n        config (Config): The configuration object that holds plugin settings.\n\n    Raises:\n        FileNotFoundError: If the plugins folder does not exist.\n    \"\"\"\n    log = get_logger()\n    plugins_folder = Path(config.get(\"settings.server_folder\").data, \"plugins\")\n    is_new_plugin = False\n    keep_removed: bool = config.get(\n        \"settings.keep_removed\", sy.YAML(False, sy.Bool())\n    ).data\n\n    # updating YAML object directly is too slow\n    # instead we create a new dict object that hold {plugin_name: YAML}\n    # and use it to add new plugins\n    if config.data[\"plugins\"]:\n        plugins_config: sy.YAML = sy.load(\n            config.strictyaml[\"plugins\"].as_yaml(),\n            config.strictyaml[\"plugins\"].validator,\n        )\n    else:\n        plugins_config: sy.YAML = sy.as_document(\n            {}, config.strictyaml[\"plugins\"].validator\n        )\n    if plugins_config.data:\n        _ = {}\n        for k in plugins_config.data.keys():\n            _[k] = plugins_config[k]\n        plugins_config = _\n    else:\n        plugins_config = plugins_config.data\n    # ensure the typing\n    plugins_config: dict[str, sy.YAML] = plugins_config\n\n    status = get_rich_status()\n\n    with status:\n        status_update(status, \"Scanning Plugins\")\n\n        if not plugins_folder.exists():\n            log.error(\n                \"Could not check plugins because plugins folder is not exist :shrug:\"\n            )\n            raise FileNotFoundError\n\n        for jar in plugins_folder.glob(\"*.jar\"):\n            file_hash = FileHash(jar)\n            jar_info = get_jar_info(jar)\n            default_plugin_data = get_plugin_default()\n\n            if plugins_config.get(jar_info.name, sy.YAML(None, sy.EmptyNone())).data:\n                if (\n                    file_hash.md5 == plugins_config[jar_info.name][\"hashes\"][\"md5\"].data\n                    and jar.name == plugins_config[jar_info.name][\"file\"].data\n                ):\n                    continue\n            else:\n                is_new_plugin = True\n\n            # Why is this using a YAML object instead of a regular dict?\n            #\n            # This is because the `preserve_comments` feature of the strictyaml library\n            # allows comments to be preserved in the YAML file, but regular dictionaries\n            # don't have this ability.\n            #\n            # If the config for a plugin already exists, updating it will be slower\n            # because the YAML library needs to re-validate the entire config.\n            # Otherwise, it will be faster.\n            log.info(f\"[green]Update config for {jar_info.name} [cyan]{jar.name}\")\n\n            # use default_plugin_data if not exists\n            if not plugins_config.get(\n                jar_info.name, sy.YAML(None, sy.EmptyNone())\n            ).data:\n                plugin_data: sy.YAML = default_plugin_data\n            else:\n                plugin_data = plugins_config[jar_info.name]\n\n            plugin_data[\"file\"] = jar.name\n            plugin_data[\"version\"] = jar_info.version\n            plugin_data[\"authors\"] = jar_info.authors\n\n            plugin_hashes = plugin_data[\"hashes\"]\n            plugin_hashes[\"md5\"] = file_hash.md5\n            plugin_hashes[\"sha1\"] = file_hash.sha1\n            plugin_hashes[\"sha256\"] = file_hash.sha256\n            plugin_hashes[\"sha512\"] = file_hash.sha512\n\n            plugins_config[jar_info.name] = plugin_data\n\n        status_update(status, \"Finished Scanning Plugins\")\n\n        if not keep_removed:\n            status_update(status, \"Remove deleted plugin\")\n\n            for name in list(plugins_config.keys()).copy():\n                if Path(plugins_folder, plugins_config[name].data[\"file\"]).exists():\n                    continue\n                log.info(f\"[red]Removing {name} from config\")\n                del plugins_config[name]\n            status_update(status, \"Finished removing plugins\")\n\n        status_update(status, \"Fixing Config\")\n        for name in plugins_config.keys():\n            fix_config(\n                plugins_config[name],\n                default_plugin_data,\n                name,\n            )\n        status_update(status, \"Finished Fixing Config\")\n\n        # this part also fix the yaml comment by editing it as yaml text\n        status_update(status, \"Updating Config\")\n        sorted_plugins = sorted(plugins_config.keys(), key=lambda k: k.lower())\n        with StringIO() as temp:\n            temp.write(\"plugins:\\n\")\n            inline_comment_regex = re.compile(r\"(\\s+)#\")\n            for name in sorted_plugins:\n                temp.write(reindent(f\"{name}:\\n\", 2))\n                for line in plugins_config[name].as_yaml().splitlines():\n                    if not line.lstrip().startswith(\"#\"):\n                        # remove excessive whitespaces between inline comments\n                        line = inline_comment_regex.sub(\" #\", line)\n                        # .as_yaml() already dedent the yaml, we only need to add indent\n                        line = \" \" * 4 + line\n                    else:\n                        # indent the mapping comment\n                        line = reindent(line, 6)\n                    temp.write(line + \"\\n\")\n\n            data = sy.load(\n                temp.getvalue(), sy.Map({\"plugins\": config.get(\"plugins\").validator})\n            )\n            config.set(\"plugins\", data[\"plugins\"])\n            config.save()\n            config.reload()\n        status_update(status, \"Config updated\")\n\n        if is_new_plugin:\n            log.info(\"[green]You have new plugin, please fill the config\")\n            exit()\n</code></pre>"},{"location":"reference/cupang_updater/task/update/","title":"update","text":""},{"location":"reference/cupang_updater/task/update/#cupang_updater.task.update.status_update","title":"status_update","text":"<pre><code>status_update(status, msg, level='info', no_log=False)\n</code></pre> Source code in <code>src\\cupang_updater\\task\\update.py</code> <pre><code>def status_update(status: Status, msg: str, level: str = \"info\", no_log: bool = False):\n    status.update(msg)\n    if no_log:\n        return\n    log = get_logger()\n    getattr(log, level, getattr(log, \"info\"))(msg)\n</code></pre>"},{"location":"reference/cupang_updater/task/update/#cupang_updater.task.update.update_server","title":"update_server","text":"<pre><code>update_server(config)\n</code></pre> <p>Update the server based on the given configuration.</p> Source code in <code>src\\cupang_updater\\task\\update.py</code> <pre><code>def update_server(config: Config) -&gt; None:\n    \"\"\"\n    Update the server based on the given configuration.\n    \"\"\"\n    status = get_rich_status()\n    with get_rich_live(get_progress(), status):\n        server_folder = Path(config.get(\"settings.server_folder\").data)\n        if config.get(\"server.enable\", True):\n            status_update(status, \"Updating Server\")\n\n            result = _handle_server_update(\n                get_server_updaters(config.get(\"server.type\").data),\n                server_folder,\n                config.get(\"server\").data,\n                config.get(\"updater_settings.server\").data,\n            )\n            if result:\n                server_hash, server_config_update = result\n\n                # Updating the server config is somewhat unique, as we only perform updates for build_number and hashes\n                config.set(\n                    \"server.build_number\",\n                    # server_config contains a mapping of {updater_name: updater_config_update}\n                    server_config_update.server_config[\n                        list(server_config_update.server_config.keys())[0]\n                    ].get(\"build_number\", 0)\n                    or 0,\n                )\n                config.set(\n                    \"server.hashes\",\n                    dict(\n                        md5=server_hash.md5,\n                        sha1=server_hash.sha1,\n                        sha256=server_hash.sha256,\n                        sha512=server_hash.sha512,\n                    ),\n                )\n                _handle_settings_common_update(config, server_config_update)\n\n            status_update(status, \"Finished Updating Server\")\n</code></pre>"},{"location":"reference/cupang_updater/task/update/#cupang_updater.task.update.update_plugin","title":"update_plugin","text":"<pre><code>update_plugin(config)\n</code></pre> <p>Update the plugins based on the given configuration.</p> PARAMETER DESCRIPTION <code>config</code> <p>The configuration object containing update settings.</p> <p> TYPE: <code>Config</code> </p> Source code in <code>src\\cupang_updater\\task\\update.py</code> <pre><code>def update_plugin(config: Config) -&gt; None:\n    \"\"\"\n    Update the plugins based on the given configuration.\n\n    Args:\n        config (Config): The configuration object containing update settings.\n    \"\"\"\n    log = get_logger()\n    status = get_rich_status()\n    with get_rich_live(get_progress(), status):\n        server_folder = Path(config.get(\"settings.server_folder\").data)\n        plugins_folder = server_folder / \"plugins\"\n        if not plugins_folder.exists():\n            log.error(\n                f\"I don't know how you do it, but your {plugins_folder} is missing for some reason\"\n            )\n            return 1\n\n        update_order: list[str] = config.get(\"settings.update_order\").data\n        updater_list: list[type[PluginUpdater]] = [\n            get_plugin_updater(name) for name in update_order\n        ]\n\n        plugins: dict[str, dict] = config.get(\"plugins\").data\n\n        with ThreadPoolExecutor(5) as worker:\n            jobs: list[Future] = []\n            for plugin_name, plugin_data in plugins.items():\n                status_update(status, f\"Adding job for {plugin_name}\", level=\"debug\")\n\n                # skip plugins that are marked as excluded or don't exist\n                old_plugin = plugins_folder / plugin_data.get(\"file\", \".unknown\")\n                if plugin_data[\"exclude\"]:\n                    log.warning(f\"Plugin {plugin_name} is excluded, skipping\")\n                    continue\n                if not old_plugin.exists():\n                    log.warning(f\"Plugin {plugin_name} is a leftover, skipping\")\n                    continue\n\n                jobs.append(\n                    worker.submit(\n                        _handle_plugin_update,\n                        updater_list,\n                        plugins_folder,\n                        plugin_name,\n                        plugin_data,\n                        config.get(\"updater_settings.plugin\").data,\n                    )\n                )\n\n            status_update(status, \"All job added, waiting for completion\")\n            try:\n                while not all([x.done() for x in jobs]) and not stop_event.is_set():\n                    time.sleep(1)\n            except (KeyboardInterrupt, Exception):\n                stop_event.set()\n            finally:\n                worker.shutdown(wait=False, cancel_futures=True)\n\n            for job in jobs:\n                if job.cancelled() or not job.result():\n                    continue\n                plugin_name, plugin_meta_update, config_update = job.result()\n\n                log.info(\n                    f\"[green]Update config for {plugin_name} [cyan]{plugin_meta_update['file']}\"\n                )\n\n                _handle_plugin_meta_update(config, plugin_name, plugin_meta_update)\n                _handle_plugin_updater_update(config, plugin_name, config_update)\n                _handle_settings_common_update(config, config_update)\n            status_update(status, \"Finished updating plugins\")\n</code></pre>"},{"location":"reference/cupang_updater/task/update/#cupang_updater.task.update.update_all","title":"update_all","text":"<pre><code>update_all(config, opt)\n</code></pre> <p>Update the server and plugins.</p> PARAMETER DESCRIPTION <code>config</code> <p>The configuration object containing update settings.</p> <p> TYPE: <code>Config</code> </p> <code>opt</code> <p>Parsed command line options.</p> <p> TYPE: <code>Namespace</code> </p> Source code in <code>src\\cupang_updater\\task\\update.py</code> <pre><code>def update_all(config: Config, opt: argparse.Namespace) -&gt; None:\n    \"\"\"\n    Update the server and plugins.\n\n    Args:\n        config (Config): The configuration object containing update settings.\n        opt (argparse.Namespace): Parsed command line options.\n    \"\"\"\n    log = get_logger()\n    last_update = config.get(\"last_update\").data\n    if last_update and not opt.force:\n        today = parse_date_datetime(datetime.now())\n        last_update = parse_date_datetime(last_update)\n        cooldown = timedelta(\n            hours=config.get(\"settings.update_cooldown\", sy.YAML(12, sy.Int())).data\n        )\n\n        # Check time elapsed since the last update\n        if (today - last_update) &lt;= cooldown:\n            # Calculate the remaining time\n            remaining = (last_update + cooldown) - today\n            log.info(\n                f\"Updater still in cooldown, {round(remaining.total_seconds() / 3600)} hours remaining\"\n            )\n            return\n\n    update_server(config)\n    update_plugin(config)\n    config.set(\"last_update\", str(parse_date_datetime(datetime.now())))\n    config.save()\n    config.reload()\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/","title":"base","text":""},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.Hashes","title":"Hashes  <code>dataclass</code>","text":"<pre><code>Hashes(md5=None, sha1=None, sha256=None, sha512=None)\n</code></pre> ATTRIBUTE DESCRIPTION <code>md5</code> <p>The MD5 hash of the file.</p> <p> TYPE: <code>str</code> </p> <code>sha1</code> <p>The SHA-1 hash of the file.</p> <p> TYPE: <code>str</code> </p> <code>sha256</code> <p>The SHA-256 hash of the file.</p> <p> TYPE: <code>str</code> </p> <code>sha512</code> <p>The SHA-512 hash of the file.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.Hashes.md5","title":"md5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>md5 = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.Hashes.sha1","title":"sha1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sha1 = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.Hashes.sha256","title":"sha256  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sha256 = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.Hashes.sha512","title":"sha512  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sha512 = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData","title":"CommonData  <code>dataclass</code>","text":"<pre><code>CommonData(\n    name,\n    version,\n    hashes=Hashes(),\n    download_headers=None,\n    extra=None,\n)\n</code></pre> ATTRIBUTE DESCRIPTION <code>name</code> <p>The name of the file.</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>The version of the file.</p> <p> TYPE: <code>str</code> </p> <code>hashes</code> <p>The hashes of the file.</p> <p> TYPE: <code>Hashes</code> </p> <code>download_headers</code> <p>The headers to use when downloading the file.</p> <p> TYPE: <code>dict[str, str]</code> </p> <code>extra</code> <p>Additional information about the file.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>url</code> <p>The URL of the file.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.hashes","title":"hashes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hashes = field(default_factory=Hashes)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.download_headers","title":"download_headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>download_headers = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = field(init=False)\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\base.py</code> <pre><code>def __post_init__(self):\n    if self.download_headers:\n        self.download_headers = {**self.download_headers, **default_headers}\n    self.extra = self.extra or {}\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.CommonData.set_url","title":"set_url","text":"<pre><code>set_url(url)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\base.py</code> <pre><code>def set_url(self, url: str) -&gt; \"CommonData\":\n    self.url = url\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase","title":"UpdaterBase","text":"<p>Abstract base class for all updaters.</p> <p>This class provides common methods and properties for all updaters.</p>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.log","title":"log  <code>property</code>","text":"<pre><code>log\n</code></pre> RETURNS DESCRIPTION <code>Logger</code> <p>logging.Logger: The logger for this Updater instance.</p>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.make_url","title":"make_url  <code>property</code>","text":"<pre><code>make_url\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.make_requests","title":"make_requests  <code>property</code>","text":"<pre><code>make_requests\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.check_content_type","title":"check_content_type  <code>property</code>","text":"<pre><code>check_content_type\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.parse_version","title":"parse_version  <code>property</code>","text":"<pre><code>parse_version\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.get_updater_name","title":"get_updater_name  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> <p>Get the name of the updater.</p> RETURNS DESCRIPTION <code>str</code> <p>The name of the updater.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src\\cupang_updater\\updater\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_updater_name() -&gt; str:\n    \"\"\"\n    Get the name of the updater.\n\n    Returns:\n        str: The name of the updater.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.get_updater_version","title":"get_updater_version  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> <p>Get the version of the updater.</p> RETURNS DESCRIPTION <code>str</code> <p>The version of the updater.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src\\cupang_updater\\updater\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_updater_version() -&gt; str:\n    \"\"\"\n    Get the version of the updater.\n\n    Returns:\n        str: The version of the updater.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/base/#cupang_updater.updater.base.UpdaterBase.get_config_path","title":"get_config_path  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> <p>Get the path to the configuration file for this updater.</p> RETURNS DESCRIPTION <code>str</code> <p>The path to the configuration file.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src\\cupang_updater\\updater\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_config_path() -&gt; str:\n    \"\"\"\n    Get the path to the configuration file for this updater.\n\n    Returns:\n        str: The path to the configuration file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/","title":"github","text":""},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI","title":"GithubAPI","text":"<pre><code>GithubAPI(repo, prerelease=False, token=None)\n</code></pre> <p>Initialize the GithubAPI object.</p> PARAMETER DESCRIPTION <code>repo</code> <p>The name of the Github repository, e.g. \"EssentialsX/Essentials\"</p> <p> TYPE: <code>str</code> </p> <code>prerelease</code> <p>Whether to include prereleases in the query. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>token</code> <p>The Github API token to use for authentication. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def __init__(self, repo: str, prerelease: bool = False, token: str = None):\n    \"\"\"\n    Initialize the GithubAPI object.\n\n    Args:\n        repo (str): The name of the Github repository, e.g. \"EssentialsX/Essentials\"\n        prerelease (bool, optional): Whether to include prereleases in the query. Defaults to False.\n        token (str, optional): The Github API token to use for authentication. Defaults to None.\n    \"\"\"\n\n    self.repo = repo\n    self.api = \"https://api.github.com\"\n    self.prerelease = prerelease\n    self.token = token\n\n    self.headers = {\"Accept\": \"application/json\"}\n    if self.token:\n        self.headers[\"Authorization\"] = f\"Bearer {self.token}\"\n\n    self.latest_data: dict[str, Any] = None\n    self.tag_data: dict[str, Any] = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.repo","title":"repo  <code>instance-attribute</code>","text":"<pre><code>repo = repo\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.github.com'\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.prerelease","title":"prerelease  <code>instance-attribute</code>","text":"<pre><code>prerelease = prerelease\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token = token\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = {'Accept': 'application/json'}\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.latest_data","title":"latest_data  <code>instance-attribute</code>","text":"<pre><code>latest_data = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.tag_data","title":"tag_data  <code>instance-attribute</code>","text":"<pre><code>tag_data = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.get_asset_url","title":"get_asset_url","text":"<pre><code>get_asset_url(name_regex)\n</code></pre> <p>Get the URL of the latest release asset matching the given name regex.</p> <p>Args: - name_regex (str): The name regex to match.</p> <p>Returns: - str | None: The URL of the asset, or None if an error occurred.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def get_asset_url(self, name_regex: str):\n    \"\"\"\n    Get the URL of the latest release asset matching the given name regex.\n\n    Args:\n    - name_regex (str): The name regex to match.\n\n    Returns:\n    - str | None: The URL of the asset, or None if an error occurred.\n    \"\"\"\n    asset = self._get_asset(re.compile(name_regex))\n    return asset[\"browser_download_url\"] if asset else None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.get_commit","title":"get_commit","text":"<pre><code>get_commit()\n</code></pre> <p>Get the commit SHA for the latest release tag.</p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: The commit SHA, or None if an error occurred.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def get_commit(self) -&gt; str | None:\n    \"\"\"\n    Get the commit SHA for the latest release tag.\n\n    Returns:\n        str | None: The commit SHA, or None if an error occurred.\n    \"\"\"\n    tag = self.get_tag()\n    if not tag:\n        return\n    tag_data = self._get_tag_data(tag)\n    return tag_data[\"object\"][\"sha\"][7:] if tag_data else None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.get_file_name","title":"get_file_name","text":"<pre><code>get_file_name(name_regex)\n</code></pre> <p>Get the name of the latest release asset matching the given name regex.</p> <p>Args: - name_regex (str): The name regex to match.</p> <p>Returns: - str | None: The name of the asset, or None if an error occurred.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def get_file_name(self, name_regex: str):\n    \"\"\"\n    Get the name of the latest release asset matching the given name regex.\n\n    Args:\n    - name_regex (str): The name regex to match.\n\n    Returns:\n    - str | None: The name of the asset, or None if an error occurred.\n    \"\"\"\n    asset = self._get_asset(re.compile(name_regex))\n    return asset[\"name\"] if asset else None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.get_release_name","title":"get_release_name","text":"<pre><code>get_release_name()\n</code></pre> <p>Get the name of the latest release.</p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: The release name, or None if an error occurred.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def get_release_name(self) -&gt; str | None:\n    \"\"\"\n    Get the name of the latest release.\n\n    Returns:\n        str | None: The release name, or None if an error occurred.\n    \"\"\"\n    latest_release = self._get_latest_release()\n    return latest_release[\"name\"] if latest_release else None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/github/#cupang_updater.updater.common_api.github.GithubAPI.get_tag","title":"get_tag","text":"<pre><code>get_tag()\n</code></pre> <p>Get the tag of the latest release.</p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: The tag name, or None if an error occurred.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\github.py</code> <pre><code>def get_tag(self) -&gt; str | None:\n    \"\"\"\n    Get the tag of the latest release.\n\n    Returns:\n        str | None: The tag name, or None if an error occurred.\n    \"\"\"\n    latest_release = self._get_latest_release()\n    return latest_release[\"tag_name\"] if latest_release else None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/","title":"jenkins","text":""},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI","title":"JenkinsAPI","text":"<pre><code>JenkinsAPI(url)\n</code></pre> <p>Initialize the JenkinsAPI object.</p> PARAMETER DESCRIPTION <code>url</code> <p>The base URL for the Jenkins server.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src\\cupang_updater\\updater\\common_api\\jenkins.py</code> <pre><code>def __init__(self, url: str):\n    \"\"\"\n    Initialize the JenkinsAPI object.\n\n    Args:\n        url (str): The base URL for the Jenkins server.\n    \"\"\"\n    self.url = url\n    self.headers = {\"Accept\": \"application/json\"}\n    self.latest_data: dict[str, Any] = None\n    self.latest_build_number: int = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url = url\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = {'Accept': 'application/json'}\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.latest_data","title":"latest_data  <code>instance-attribute</code>","text":"<pre><code>latest_data = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.latest_build_number","title":"latest_build_number  <code>instance-attribute</code>","text":"<pre><code>latest_build_number = None\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.get_build_number","title":"get_build_number","text":"<pre><code>get_build_number()\n</code></pre> <p>Get latest build number.</p> RETURNS DESCRIPTION <code>int</code> <p>The build number of the latest build.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src\\cupang_updater\\updater\\common_api\\jenkins.py</code> <pre><code>def get_build_number(self) -&gt; int:\n    \"\"\"\n    Get latest build number.\n\n    Returns:\n        int: The build number of the latest build.\n    \"\"\"\n    if not self.latest_build_number:\n        self._get_latest_data()\n    return self.latest_build_number\n</code></pre>"},{"location":"reference/cupang_updater/updater/common_api/jenkins/#cupang_updater.updater.common_api.jenkins.JenkinsAPI.get_artifact_url","title":"get_artifact_url","text":"<pre><code>get_artifact_url(name_regex)\n</code></pre> <p>Retrieve the URL of the first artifact matching the provided name regex from the latest build.</p> PARAMETER DESCRIPTION <code>name_regex</code> <p>The regex pattern to match the artifact name.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: The URL of the matching artifact, or None if no match is found.</p> Source code in <code>src\\cupang_updater\\updater\\common_api\\jenkins.py</code> <pre><code>def get_artifact_url(self, name_regex: str) -&gt; str | None:\n    \"\"\"\n    Retrieve the URL of the first artifact matching the provided name regex from the latest build.\n\n    Args:\n        name_regex (str): The regex pattern to match the artifact name.\n\n    Returns:\n        str | None: The URL of the matching artifact, or None if no match is found.\n    \"\"\"\n    artifact = self._get_artifact(re.compile(name_regex))\n    if not artifact:\n        return\n    return make_url(\n        self.url,\n        str(self.latest_build_number),\n        \"artifact\",\n        artifact[\"relativePath\"],\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/","title":"base","text":""},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema","title":"PluginUpdaterConfigSchema  <code>dataclass</code>","text":"<pre><code>PluginUpdaterConfigSchema(\n    common_schema=None,\n    common_default=None,\n    plugin_schema=None,\n    plugin_default=None,\n)\n</code></pre> <p>Schema configuration for a plugin updater.</p> ATTRIBUTE DESCRIPTION <code>common_schema</code> <p>Validator for common configuration.</p> <p> TYPE: <code>MapValidator</code> </p> <code>common_default</code> <p>Default value for common configuration.</p> <p> TYPE: <code>str</code> </p> <code>plugin_schema</code> <p>Validator for plugin-specific configuration.</p> <p> TYPE: <code>MapValidator</code> </p> <code>plugin_default</code> <p>Default value for plugin-specific configuration.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema.common_schema","title":"common_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_schema = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema.common_default","title":"common_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_default = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema.plugin_schema","title":"plugin_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugin_schema = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema.plugin_default","title":"plugin_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugin_default = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfigSchema.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def __post_init__(self):\n    if self.common_default is not None:\n        self.common_default = reindent(self.common_default, 0)\n        if not isinstance(self.common_schema, MapValidator):\n            raise TypeError(\"common_schema should be a MapValidator instance\")\n    if self.plugin_default is not None:\n        self.plugin_default = reindent(self.plugin_default, 0)\n        if not isinstance(self.plugin_schema, MapValidator):\n            raise TypeError(\"plugin_schema should be a MapValidator instance\")\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfig","title":"PluginUpdaterConfig  <code>dataclass</code>","text":"<pre><code>PluginUpdaterConfig(common_config=None, plugin_config=None)\n</code></pre> <p>Configuration for a plugin updater.</p> ATTRIBUTE DESCRIPTION <code>common_config</code> <p>Common configuration for the plugin updater.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>plugin_config</code> <p>Plugin-specific configuration for the plugin updater.</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfig.common_config","title":"common_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_config = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfig.plugin_config","title":"plugin_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plugin_config = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def __post_init__(self):\n    self.common_config = self.common_config or {}\n    self.plugin_config = self.plugin_config or {}\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdaterConfig.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def copy(self) -&gt; \"PluginUpdaterConfig\":\n    return PluginUpdaterConfig(\n        deepcopy(self.common_config), deepcopy(self.plugin_config)\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater","title":"PluginUpdater","text":"<pre><code>PluginUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>UpdaterBase</code></p> <p>Abstract base class for updating plugins.</p> Subclasses must implement the following abstract methods <ul> <li>get_config_schema: Get the configuration schema for the plugin updater.</li> <li>get_update: Get the latest update information for the plugin.</li> </ul> Optional methods to implement <ul> <li>get_config_update: Get the updated configuration for the plugin updater.</li> </ul> <p>Initialize the plugin updater.</p> PARAMETER DESCRIPTION <code>plugin_data</code> <p>The information about the plugin to update.</p> <p> TYPE: <code>CommonData</code> </p> <code>updater_config</code> <p>The configuration for the plugin updater.</p> <p> TYPE: <code>PluginUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    \"\"\"\n    Initialize the plugin updater.\n\n    Args:\n        plugin_data (CommonData): The information about the plugin to update.\n        updater_config (PluginUpdaterConfig): The configuration for the plugin updater.\n    \"\"\"\n    self.plugin_data = plugin_data\n    self.updater_config = updater_config\n    super().__init__()\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater.plugin_data","title":"plugin_data  <code>instance-attribute</code>","text":"<pre><code>plugin_data = plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater.updater_config","title":"updater_config  <code>instance-attribute</code>","text":"<pre><code>updater_config = updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater.get_config_schema","title":"get_config_schema  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> <p>Get the configuration schema for the plugin updater.</p> RETURNS DESCRIPTION <code>PluginUpdaterConfigSchema</code> <p>The schema for the plugin updater configuration.</p> <p> TYPE: <code>PluginUpdaterConfigSchema</code> </p> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_config_schema() -&gt; PluginUpdaterConfigSchema:\n    \"\"\"\n    Get the configuration schema for the plugin updater.\n\n    Returns:\n        PluginUpdaterConfigSchema: The schema for the plugin updater configuration.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> <p>Get the updated configuration for the plugin updater.</p> RETURNS DESCRIPTION <code>PluginUpdaterConfig</code> <p>The default configuration for the plugin updater.</p> <p> TYPE: <code>PluginUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def get_config_update(self) -&gt; PluginUpdaterConfig:\n    \"\"\"\n    Get the updated configuration for the plugin updater.\n\n    Returns:\n        PluginUpdaterConfig: The default configuration for the plugin updater.\n    \"\"\"\n    return PluginUpdaterConfig()\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/base/#cupang_updater.updater.plugin.base.PluginUpdater.get_update","title":"get_update  <code>abstractmethod</code>","text":"<pre><code>get_update()\n</code></pre> <p>Get the latest update information for the plugin.</p> RETURNS DESCRIPTION <code>CommonData | None</code> <ul> <li>CommonData | None: The latest plugin data, or None if an error occurred.</li> </ul> Note <p>ensure the returned CommonData has the URL set using .set_url()</p> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>@abstractmethod\ndef get_update(self) -&gt; CommonData | None:\n    \"\"\"\n    Get the latest update information for the plugin.\n\n    Returns:\n        - CommonData | None: The latest plugin data, or None if an error occurred.\n\n    Note:\n        ensure the returned CommonData has the URL set using .set_url()\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/","title":"bukkit","text":""},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater","title":"BukkitUpdater","text":"<pre><code>BukkitUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.api = \"https://api.curseforge.com/servermods\"\n    self.date_regex = re.compile(r\"/Date\\((\\d+)\\)/\")\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.curseforge.com/servermods'\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.date_regex","title":"date_regex  <code>instance-attribute</code>","text":"<pre><code>date_regex = compile('/Date\\\\((\\\\d+)\\\\)/')\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Bukkit\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"bukkit\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map({\"project_id\": sy.EmptyNone() | sy.Int()}),\n        plugin_default=\"\"\"\\\n            # In \"About This Project\" section in the plugin's page, for example\n            # for example 71561 for mythicmobs https://dev.bukkit.org/projects/mythicmobs\n            project_id:\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/bukkit/#cupang_updater.updater.plugin.bukkit.BukkitUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\bukkit.py</code> <pre><code>def get_update(self) -&gt; CommonData | None:\n    project_id = self.updater_config.plugin_config[\"project_id\"]\n    if not project_id:\n        return\n\n    latest_data = self._get_update(project_id)\n\n    local_md5 = self.plugin_data.hashes.md5\n    remote_md5 = latest_data.get(\"md5\")\n    if local_md5 == remote_md5:\n        return\n\n    url = latest_data.get(\"downloadUrl\")\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    plugin_data = CommonData(name=self.plugin_data.name, version=\"\")\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/","title":"custom","text":""},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater","title":"CustomUrlPluginUpdater","text":"<pre><code>CustomUrlPluginUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> <p>Initialize the plugin updater.</p> PARAMETER DESCRIPTION <code>plugin_data</code> <p>The information about the plugin to update.</p> <p> TYPE: <code>CommonData</code> </p> <code>updater_config</code> <p>The configuration for the plugin updater.</p> <p> TYPE: <code>PluginUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\plugin\\base.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    \"\"\"\n    Initialize the plugin updater.\n\n    Args:\n        plugin_data (CommonData): The information about the plugin to update.\n        updater_config (PluginUpdaterConfig): The configuration for the plugin updater.\n    \"\"\"\n    self.plugin_data = plugin_data\n    self.updater_config = updater_config\n    super().__init__()\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\custom.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Custom URL\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\custom.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"custom_url\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\custom.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\custom.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map({\"url\": sy.EmptyNone() | sy.Str()}),\n        plugin_default=\"\"\"\\\n            # Set download url (must point to a file url)\n            url:\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/custom/#cupang_updater.updater.plugin.custom.CustomUrlPluginUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\custom.py</code> <pre><code>def get_update(self) -&gt; CommonData | None:\n    url = self.updater_config.plugin_config[\"url\"]\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    plugin_data = CommonData(name=self.plugin_data.name, version=\"\")\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/","title":"github","text":""},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.CompareToType","title":"CompareToType","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.CompareToType.compare_to","title":"compare_to  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>compare_to = [\"commit\", \"tags\", \"release_name\", \"file_name\"]\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.CompareToType.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>def validate_scalar(self, chunk):\n    val = chunk.contents\n    if val.lower() not in self.compare_to:\n        chunk.expecting_but_found(f\"when expecting one of {self.compare_to}\")\n    return val\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater","title":"GithubUpdater","text":"<pre><code>GithubUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.token = updater_config.common_config.get(\"token\")\n    self.new_updater_config = updater_config.copy()\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token = get('token')\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.new_updater_config","title":"new_updater_config  <code>instance-attribute</code>","text":"<pre><code>new_updater_config = copy()\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Github\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"github\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        common_schema=sy.Map({\"token\": sy.EmptyNone() | sy.Str()}),\n        common_default=\"\"\"\\\n            token: # github token\n        \"\"\",\n        plugin_schema=sy.Map(\n            {\n                \"repo\": sy.EmptyNone() | sy.Str(),\n                \"name_regex\": sy.EmptyNone() | sy.Str(),\n                \"prerelease\": sy.Bool(),\n                \"commit\": sy.EmptyNone() | sy.Str(),\n                \"compare_to\": CompareToType(),\n            }\n        ),\n        plugin_default=\"\"\"\\\n            # repo: format is \"user/repository\" for example \"EssentialsX/Essentials\"\n            # name_regex: a regex search for the file name, example \"Geyser-Spigot\"\n            # prerelease: true to get prerelease version\n            # commit: auto generate\n            # compare_to: commit, tags, release_name, or file_name\n            repo: \n            name_regex: \n            prerelease: false\n            commit: \n            compare_to: tags \n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>def get_config_update(self) -&gt; PluginUpdaterConfig:\n    return self.new_updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/github/#cupang_updater.updater.plugin.github.GithubUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\github.py</code> <pre><code>def get_update(self) -&gt; CommonData | None:\n    repo = self.updater_config.plugin_config.get(\"repo\")\n    if not repo:\n        return\n\n    name_regex = self.updater_config.plugin_config.get(\"name_regex\")\n    if not name_regex:\n        return\n\n    compare_to = self.updater_config.plugin_config.get(\"compare_to\")\n    if not compare_to:\n        return\n\n    prerelease = self.updater_config.plugin_config.get(\"prerelease\", False)\n\n    api = GithubAPI(repo, prerelease, self.token)\n\n    commit = \"\"\n    version = \"\"\n    if compare_to == \"commit\":\n        local_commit = self.updater_config.plugin_config.get(\"commit\")\n        remote_commit = api.get_commit()\n        if local_commit == remote_commit:\n            return\n        commit = remote_commit\n    else:\n        local_version = self.parse_version(self.plugin_data.version)\n        match compare_to:\n            case \"tags\":\n                remote_version = self.parse_version(api.get_tag())\n            case \"release_name\":\n                remote_version = self.parse_version(api.get_release_name())\n            case \"file_name\":\n                remote_version = self.parse_version(api.get_file_name(name_regex))\n            case _:\n                remote_version = self.parse_version(\"1.0\")\n        if local_version &gt;= remote_version:\n            return\n        version = str(remote_version)\n\n    url = api.get_asset_url(name_regex)\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    self.new_updater_config.plugin_config[\"commit\"] = commit\n    plugin_data = CommonData(\n        name=self.plugin_data.name,\n        version=version,\n        download_headers={\"Authorization\": f\"Bearer {self.token}\"}\n        if self.token\n        else None,\n    )\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/","title":"hangar","text":""},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.PlatformType","title":"PlatformType","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.PlatformType.platform","title":"platform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>platform = ['paper', 'waterfall', 'velocity']\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.PlatformType.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>def validate_scalar(self, chunk):\n    val: str = chunk.contents\n    val = val.lower()\n    if val not in self.platform:\n        chunk.expecting_but_found(f\"when expecting one of these: {self.platform}\")\n    return super().validate_scalar(chunk)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.Channel","title":"Channel","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.Channel.channel","title":"channel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>channel = ['release', 'snapshot', 'alpha']\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.Channel.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>def validate_scalar(self, chunk):\n    val: str = chunk.contents\n    if val not in self.channel:\n        chunk.expecting_but_found(f\"when expecting one of these: {self.channel}\")\n\n    return super().validate_scalar(chunk)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater","title":"HangarUpdater","text":"<pre><code>HangarUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.api = \"https://hangar.papermc.io/api/v1/projects\"\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://hangar.papermc.io/api/v1/projects'\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Hangar\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"hangar\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map(\n            {\n                \"id\": sy.EmptyNone() | sy.Str(),\n                \"platform\": sy.EmptyNone() | PlatformType(),\n                \"channel\": Channel(),\n            }\n        ),\n        plugin_default=\"\"\"\\\n            # id: example https://hangar.papermc.io/[author]/[your project id here]\n            # platform: paper, waterfall, or velocity\n            # channel: release, snapshot, or alpha\n            id:\n            platform: paper\n            channel: release\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/hangar/#cupang_updater.updater.plugin.hangar.HangarUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\hangar.py</code> <pre><code>def get_update(self):\n    project_id: str = self.updater_config.plugin_config[\"id\"]\n    if not project_id:\n        return\n    platform: str = self.updater_config.plugin_config[\"platform\"]\n    if not platform:\n        return\n    channel: str = self.updater_config.plugin_config[\"channel\"]\n    if not channel:\n        return\n\n    update_data = self._get_update_data(project_id, channel)\n    if not update_data:\n        return\n\n    # Compare local and remote versions\n    local_version = self.parse_version(self.plugin_data.version)\n    remote_version = str(update_data[\"name\"])\n    if local_version &gt;= self.parse_version(remote_version):\n        return\n\n    url = self.make_url(\n        self.api,\n        project_id,\n        \"versions\",\n        update_data[\"name\"],\n        platform.upper(),\n        \"download\",\n    )\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    plugin_data = CommonData(\n        name=self.plugin_data.name,\n        version=remote_version or \"\",\n    )\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/","title":"jenkins","text":""},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater","title":"JenkinsUpdater","text":"<pre><code>JenkinsUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.new_updater_config = updater_config.copy()\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.new_updater_config","title":"new_updater_config  <code>instance-attribute</code>","text":"<pre><code>new_updater_config = copy()\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Jenkins\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"jenkins\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map(\n            {\n                \"url\": sy.EmptyNone() | sy.Url(),\n                \"name_regex\": sy.EmptyNone() | sy.Str(),\n                \"build_number\": sy.EmptyNone() | sy.Int(),\n            }\n        ),\n        plugin_default=\"\"\"\\\n            # url: jenkins url\n            # name_regex: a regex search for the file name, example \"Geyser-Spigot\"\n            # build_number: auto generate\n            url:\n            name_regex:\n            build_number:\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>def get_config_update(self) -&gt; PluginUpdaterConfig:\n    return self.new_updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/jenkins/#cupang_updater.updater.plugin.jenkins.JenkinsUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\jenkins.py</code> <pre><code>def get_update(self):\n    jenkins_url = self.updater_config.plugin_config.get(\"url\")\n    if not jenkins_url:\n        return\n\n    name_regex = self.updater_config.plugin_config.get(\"name_regex\")\n    if not name_regex:\n        return\n\n    api = JenkinsAPI(jenkins_url)\n\n    local_build_number = (\n        self.updater_config.plugin_config.get(\"build_number\", 0) or 0\n    )\n    remote_build_number = api.get_build_number()\n    if local_build_number &gt;= remote_build_number:\n        return\n\n    url = api.get_artifact_url(name_regex)\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    self.new_updater_config.plugin_config[\"build_number\"] = remote_build_number\n    plugin_data = CommonData(name=self.plugin_data.name, version=\"\")\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/","title":"modrinth","text":""},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthList","title":"ModrinthList","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthList.is_valid_list","title":"is_valid_list","text":"<pre><code>is_valid_list(s)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>def is_valid_list(self, s):\n    if not s.startswith(\"[\") and not s.endswith(\"]\"):\n        return True\n    try:\n        ast.literal_eval(s)\n        return True\n    except (SyntaxError, ValueError):\n        return False\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthList.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>def validate_scalar(self, chunk):\n    val = chunk.contents\n    if not self.is_valid_list(val):\n        chunk.expecting_but_found(\n            \"when expecting string, or a valid list for example \\\"['paper', 'folia']\\\",\"\n            \" also remember to encapsulate it in quotes\"\n        )\n    return val\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthVersionType","title":"ModrinthVersionType","text":"<p>               Bases: <code>Str</code></p>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthVersionType.validate_scalar","title":"validate_scalar","text":"<pre><code>validate_scalar(chunk)\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>def validate_scalar(self, chunk):\n    val = chunk.contents\n    if val.lower() not in [\"release\", \"beta\", \"alpha\"]:\n        chunk.expecting_but_found(\n            \"when expecting one of ['release', 'beta', 'alpha']\"\n        )\n    return val\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater","title":"ModrinthUpdater","text":"<pre><code>ModrinthUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.api = \"https://api.modrinth.com/v2\"\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.modrinth.com/v2'\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Modrinth\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"modrinth\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map(\n            {\n                \"id\": sy.EmptyNone() | sy.Str(),\n                \"name_regex\": sy.EmptyNone() | sy.Str(),\n                \"loaders\": sy.EmptyNone() | ModrinthList(),\n                \"game_versions\": sy.EmptyNone() | ModrinthList(),\n                \"version_type\": ModrinthVersionType(),\n            }\n        ),\n        plugin_default=\"\"\"\\\n            # id: https://modrinth.com/plugin/[your project id here]\n            # name_regex: a regex search for the file name, example \"Geyser-Spigot\"\n            # loaders: (optional) example paper, or for many loaders [\"paper\", \"folia\"]\n            # game_versions: (optional) example 1.20.4, or for many game_versions [\"1.20.4\", \"1.18.2\"]\n            # version_type: release, beta, or alpha\n            id:\n            name_regex:\n            loaders:\n            game_versions:\n            version_type: release\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/modrinth/#cupang_updater.updater.plugin.modrinth.ModrinthUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\modrinth.py</code> <pre><code>def get_update(self):\n    project_id = self.updater_config.plugin_config[\"id\"]\n    if not project_id:\n        return\n\n    name_regex = self.updater_config.plugin_config.get(\"name_regex\")\n    if not name_regex:\n        return\n\n    loaders = self.updater_config.plugin_config.get(\"loaders\")\n    game_versions = self.updater_config.plugin_config.get(\"game_versions\")\n    version_type = self.updater_config.plugin_config.get(\"version_type\")\n\n    update_data = self._get_update_data(\n        project_id, loaders, game_versions, version_type\n    )\n    if not update_data:\n        return\n\n    # Compare local and remote versions\n    local_version = self.parse_version(self.plugin_data.version)\n    remote_version = str(update_data[\"version_number\"])\n    if local_version &gt;= self.parse_version(remote_version):\n        return\n\n    _name_regex = re.compile(name_regex)\n    file = list(\n        filter(lambda x: _name_regex.match(x[\"filename\"]), update_data[\"files\"])\n    )\n    if not file:\n        return\n\n    url = file[0].get(\"url\")\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    plugin_data = CommonData(\n        name=self.plugin_data.name,\n        version=remote_version or \"\",\n    )\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/","title":"spigot","text":""},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater","title":"SpigotUpdater","text":"<pre><code>SpigotUpdater(plugin_data, updater_config)\n</code></pre> <p>               Bases: <code>PluginUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>def __init__(self, plugin_data: CommonData, updater_config: PluginUpdaterConfig):\n    self.api = \"https://api.spiget.org/v2\"\n    super().__init__(plugin_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.spiget.org/v2'\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Spigot\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"spigot\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return PluginUpdaterConfigSchema(\n        plugin_schema=sy.Map({\"resource_id\": sy.EmptyNone() | sy.Int()}),\n        plugin_default=\"\"\"\\\n            # In spigotmc url\n            # for example: 18494 for discordsrv https://www.spigotmc.org/resources/discordsrv.18494/\n            resource_id:\n        \"\"\",\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/plugin/spigot/#cupang_updater.updater.plugin.spigot.SpigotUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\plugin\\spigot.py</code> <pre><code>def get_update(self):\n    resource_id = self.updater_config.plugin_config[\"resource_id\"]\n    if not resource_id:\n        return\n\n    is_premium = self._is_premium(resource_id)\n    if is_premium:\n        self.log.info(\n            f\"Plugin {self.plugin_data.name} is premium\\n\"\n            f\"Download it yourself at https://www.spigotmc.org/resources/{resource_id}\"\n        )\n        return\n\n    local_version = self.parse_version(self.plugin_data.version)\n    remote_version = str(self._get_version(resource_id))\n    if local_version &gt;= self.parse_version(remote_version):\n        return\n\n    url = self.make_url(self.api, \"resources\", resource_id, \"download\")\n    if not url:\n        return\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.plugin_data.name}, got {url} but its not a file\"\n            )\n            return\n\n    plugin_data = CommonData(\n        name=self.plugin_data.name,\n        version=remote_version or \"\",\n    )\n    plugin_data.set_url(url)\n    return plugin_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/","title":"base","text":""},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfigSchema","title":"ServerUpdaterConfigSchema  <code>dataclass</code>","text":"<pre><code>ServerUpdaterConfigSchema(\n    common_schema=None, common_default=None\n)\n</code></pre> <p>The schema for the configuration of a server updater.</p> ATTRIBUTE DESCRIPTION <code>common_schema</code> <p>The schema for the common configuration.</p> <p> TYPE: <code>MapValidator</code> </p> <code>common_default</code> <p>The default common configuration.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfigSchema.common_schema","title":"common_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_schema = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfigSchema.common_default","title":"common_default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_default = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfigSchema.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def __post_init__(self):\n    if self.common_default is not None:\n        self.common_default = reindent(self.common_default, 0)\n        if not isinstance(self.common_schema, MapValidator):\n            raise TypeError(\"common_schema should be a MapValidator instance\")\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfig","title":"ServerUpdaterConfig  <code>dataclass</code>","text":"<pre><code>ServerUpdaterConfig(common_config=None, server_config=None)\n</code></pre> <p>The configuration for a server updater.</p> ATTRIBUTE DESCRIPTION <code>common_config</code> <p>The common configuration for the server updater.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>server_config</code> <p>The configuration specific to the server (corresponds to server fields in config.yaml).</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfig.common_config","title":"common_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>common_config = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfig.server_config","title":"server_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server_config = field(default=None)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def __post_init__(self):\n    self.common_config = self.common_config or {}\n    self.server_config = self.server_config or {}\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdaterConfig.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Returns a deep copy of the configuration.</p> RETURNS DESCRIPTION <code>ServerUpdaterConfig</code> <p>A deep copy of the configuration.</p> <p> TYPE: <code>ServerUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def copy(self) -&gt; \"ServerUpdaterConfig\":\n    \"\"\"\n    Returns a deep copy of the configuration.\n\n    Returns:\n        ServerUpdaterConfig: A deep copy of the configuration.\n    \"\"\"\n    return ServerUpdaterConfig(\n        deepcopy(self.common_config), deepcopy(self.server_config)\n    )\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater","title":"ServerUpdater","text":"<pre><code>ServerUpdater(server_data, updater_config)\n</code></pre> <p>               Bases: <code>UpdaterBase</code></p> <p>Abstract base class for updating servers.</p> Subclasses must implement the following abstract methods <ul> <li>get_server_types: Get the list of server types supported by this updater.</li> <li>get_config_schema: Get the configuration schema for the server updater.</li> <li>get_config_update: Get the default configuration for the server updater.</li> <li>get_update: Get the latest update information for the server.</li> </ul> Optional methods to implement <ul> <li>get_config_update: Get the updated configuration for the server updater.</li> </ul> <p>Initialize the server updater.</p> PARAMETER DESCRIPTION <code>server_data</code> <p>The data about the server to update.</p> <p> TYPE: <code>CommonData</code> </p> <code>updater_config</code> <p>The configuration for the server updater.</p> <p> TYPE: <code>ServerUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def __init__(self, server_data: CommonData, updater_config: ServerUpdaterConfig):\n    \"\"\"\n    Initialize the server updater.\n\n    Args:\n        server_data (CommonData): The data about the server to update.\n        updater_config (ServerUpdaterConfig): The configuration for the server updater.\n    \"\"\"\n    self.server_data = server_data\n    self.updater_config = updater_config\n    super().__init__()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.server_data","title":"server_data  <code>instance-attribute</code>","text":"<pre><code>server_data = server_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.updater_config","title":"updater_config  <code>instance-attribute</code>","text":"<pre><code>updater_config = updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.get_server_types","title":"get_server_types  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_server_types()\n</code></pre> <p>Get the list of server types supported by this updater.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: The list of server types supported by this updater.</p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_server_types() -&gt; list[str]:\n    \"\"\"\n    Get the list of server types supported by this updater.\n\n    Returns:\n        list[str]: The list of server types supported by this updater.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.get_config_schema","title":"get_config_schema  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> <p>Get the configuration schema for the server updater.</p> RETURNS DESCRIPTION <code>ServerUpdaterConfigSchema</code> <p>The schema for the server updater configuration.</p> <p> TYPE: <code>ServerUpdaterConfigSchema</code> </p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_config_schema() -&gt; ServerUpdaterConfigSchema:\n    \"\"\"\n    Get the configuration schema for the server updater.\n\n    Returns:\n        ServerUpdaterConfigSchema: The schema for the server updater configuration.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> <p>Get the updated configuration for the server updater.</p> RETURNS DESCRIPTION <code>ServerUpdaterConfig</code> <p>The default configuration for the server updater.</p> <p> TYPE: <code>ServerUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def get_config_update(self) -&gt; ServerUpdaterConfig:\n    \"\"\"\n    Get the updated configuration for the server updater.\n\n    Returns:\n        ServerUpdaterConfig: The default configuration for the server updater.\n    \"\"\"\n    return ServerUpdaterConfig()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/base/#cupang_updater.updater.server.base.ServerUpdater.get_update","title":"get_update  <code>abstractmethod</code>","text":"<pre><code>get_update()\n</code></pre> <p>Get the latest update information for the server.</p> RETURNS DESCRIPTION <code>CommonData | None</code> <ul> <li>CommonData | None: The latest server data, or None if an error occurred.</li> </ul> Note <p>ensure the returned CommonData has the URL set using .set_url()</p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>@abstractmethod\ndef get_update(self) -&gt; CommonData | None:\n    \"\"\"\n    Get the latest update information for the server.\n\n    Returns:\n        - CommonData | None: The latest server data, or None if an error occurred.\n\n    Note:\n        ensure the returned CommonData has the URL set using .set_url()\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/","title":"bungee","text":""},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater","title":"BungeeUpdater","text":"<pre><code>BungeeUpdater(server_data, updater_config)\n</code></pre> <p>               Bases: <code>ServerUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>def __init__(self, server_data: CommonData, updater_config: ServerUpdaterConfig):\n    self.api = \"https://ci.md-5.net/job/Bungeecord\"\n    self.new_updater_config = updater_config.copy()\n    super().__init__(server_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://ci.md-5.net/job/Bungeecord'\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.new_updater_config","title":"new_updater_config  <code>instance-attribute</code>","text":"<pre><code>new_updater_config = copy()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"BungeeCord\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"bungee\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_server_types","title":"get_server_types  <code>staticmethod</code>","text":"<pre><code>get_server_types()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>@staticmethod\ndef get_server_types() -&gt; list[str]:\n    return [\"bungee\"]\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return ServerUpdaterConfigSchema()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>def get_config_update(self):\n    return self.new_updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/bungee/#cupang_updater.updater.server.bungee.BungeeUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\bungee.py</code> <pre><code>def get_update(self) -&gt; CommonData | None:\n    self.log.info(\n        f'Using {self.get_updater_name()} updater will ignore \"version\" (if set)'\n    )\n\n    api = JenkinsAPI(self.api)\n    local_build_number = self.updater_config.server_config[\"build_number\"] or 0\n    remote_build_number = api.get_build_number()\n    if local_build_number &gt;= remote_build_number:\n        return\n\n    url = api.get_artifact_url(\"BungeeCord\")\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.get_updater_name()}, got {url} but its not a file\"\n            )\n            return\n\n    self.new_updater_config.server_config[\"build_number\"] = remote_build_number\n\n    server_data = CommonData(name=self.get_updater_name(), version=\"\")\n    server_data.set_url(url)\n    return server_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/","title":"custom","text":""},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater","title":"CustomUrlServerUpdater","text":"<pre><code>CustomUrlServerUpdater(server_data, updater_config)\n</code></pre> <p>               Bases: <code>ServerUpdater</code></p> <p>Initialize the server updater.</p> PARAMETER DESCRIPTION <code>server_data</code> <p>The data about the server to update.</p> <p> TYPE: <code>CommonData</code> </p> <code>updater_config</code> <p>The configuration for the server updater.</p> <p> TYPE: <code>ServerUpdaterConfig</code> </p> Source code in <code>src\\cupang_updater\\updater\\server\\base.py</code> <pre><code>def __init__(self, server_data: CommonData, updater_config: ServerUpdaterConfig):\n    \"\"\"\n    Initialize the server updater.\n\n    Args:\n        server_data (CommonData): The data about the server to update.\n        updater_config (ServerUpdaterConfig): The configuration for the server updater.\n    \"\"\"\n    self.server_data = server_data\n    self.updater_config = updater_config\n    super().__init__()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"Custom URL\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"custom_url\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_server_types","title":"get_server_types  <code>staticmethod</code>","text":"<pre><code>get_server_types()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>@staticmethod\ndef get_server_types() -&gt; list[str]:\n    return [\"custom\"]\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return ServerUpdaterConfigSchema()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/custom/#cupang_updater.updater.server.custom.CustomUrlServerUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\custom.py</code> <pre><code>def get_update(self) -&gt; CommonData | None:\n    url = self.updater_config.server_config[\"custom_url\"]\n    if not url:\n        return\n\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.get_updater_name()}, got {url} but its not a file\"\n            )\n            return\n\n    server_data = CommonData(\n        name=self.get_updater_name(),\n        version=\"\",\n    )\n    server_data.set_url(url)\n    return server_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/","title":"paper","text":""},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater","title":"PaperUpdater","text":"<pre><code>PaperUpdater(server_data, updater_config)\n</code></pre> <p>               Bases: <code>ServerUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>def __init__(self, server_data, updater_config):\n    self.api = \"https://api.papermc.io/v2/projects\"\n    self.new_updater_config = updater_config\n    super().__init__(server_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.papermc.io/v2/projects'\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.new_updater_config","title":"new_updater_config  <code>instance-attribute</code>","text":"<pre><code>new_updater_config = updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"PaperMC\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"papermc\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_server_types","title":"get_server_types  <code>staticmethod</code>","text":"<pre><code>get_server_types()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>@staticmethod\ndef get_server_types() -&gt; list[str]:\n    return [\"paper\", \"waterfall\", \"velocity\", \"folia\"]\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return ServerUpdaterConfigSchema()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>def get_config_update(self):\n    return self.new_updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/paper/#cupang_updater.updater.server.paper.PaperUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\paper.py</code> <pre><code>def get_update(self):\n    server_type = self.updater_config.server_config[\"type\"]\n    server_version = self.updater_config.server_config[\"version\"]\n    update_data = self._get_update_data(\n        server_type,\n        server_version,\n    )\n    if not update_data:\n        return\n\n    local_sha256 = self.server_data.hashes.sha256\n    remote_sha256 = update_data[\"downloads\"][\"application\"][\"sha256\"]\n    if local_sha256 == remote_sha256:\n        return\n\n    remote_build_number = update_data[\"build\"]\n\n    url = self.make_url(\n        self.api,\n        server_type,\n        \"versions\",\n        server_version,\n        \"builds\",\n        remote_build_number,\n        \"downloads\",\n        f\"{server_type}-{server_version}-{remote_build_number}.jar\",\n    )\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.get_updater_name()}, got {url} but its not a file\"\n            )\n            return\n\n    self.new_updater_config.server_config[\"build_number\"] = update_data[\"build\"]\n    server_data = CommonData(self.get_updater_name(), \"\")\n    server_data.set_url(url)\n    return server_data\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/","title":"purpur","text":""},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater","title":"PurpurUpdater","text":"<pre><code>PurpurUpdater(server_data, updater_config)\n</code></pre> <p>               Bases: <code>ServerUpdater</code></p> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>def __init__(self, server_data, updater_config):\n    self.api = \"https://api.purpurmc.org/v2/purpur\"\n    self.new_updater_config = updater_config\n    super().__init__(server_data, updater_config)\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.api","title":"api  <code>instance-attribute</code>","text":"<pre><code>api = 'https://api.purpurmc.org/v2/purpur'\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.new_updater_config","title":"new_updater_config  <code>instance-attribute</code>","text":"<pre><code>new_updater_config = updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_updater_name","title":"get_updater_name  <code>staticmethod</code>","text":"<pre><code>get_updater_name()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>@staticmethod\ndef get_updater_name():\n    return \"PurpurMC\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_config_path","title":"get_config_path  <code>staticmethod</code>","text":"<pre><code>get_config_path()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>@staticmethod\ndef get_config_path():\n    return \"purpur\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_updater_version","title":"get_updater_version  <code>staticmethod</code>","text":"<pre><code>get_updater_version()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>@staticmethod\ndef get_updater_version():\n    return \"1.0\"\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_server_types","title":"get_server_types  <code>staticmethod</code>","text":"<pre><code>get_server_types()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>@staticmethod\ndef get_server_types() -&gt; list[str]:\n    return [\"purpur\"]\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_config_schema","title":"get_config_schema  <code>staticmethod</code>","text":"<pre><code>get_config_schema()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>@staticmethod\ndef get_config_schema():\n    return ServerUpdaterConfigSchema()\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_config_update","title":"get_config_update","text":"<pre><code>get_config_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>def get_config_update(self):\n    return self.new_updater_config\n</code></pre>"},{"location":"reference/cupang_updater/updater/server/purpur/#cupang_updater.updater.server.purpur.PurpurUpdater.get_update","title":"get_update","text":"<pre><code>get_update()\n</code></pre> Source code in <code>src\\cupang_updater\\updater\\server\\purpur.py</code> <pre><code>def get_update(self):\n    server_version = self.updater_config.server_config[\"version\"]\n    update_data = self._get_update_data(server_version)\n    if not update_data:\n        return\n\n    local_build_number = self.updater_config.server_config[\"build_number\"] or 0\n    remote_build_number = int(update_data[\"builds\"][\"latest\"])\n    if local_build_number &gt;= remote_build_number:\n        return\n\n    url = self.make_url(\n        self.api,\n        server_version,\n        remote_build_number,\n        \"download\",\n    )\n    with self.make_requests(url, method=\"HEAD\") as res:\n        if not any(\n            self.check_content_type(res, x)\n            for x in [\n                \"application/java-archive\",\n                \"application/octet-stream\",\n                \"application/zip\",\n            ]\n        ):\n            self.log.error(\n                f\"When checking update for {self.get_updater_name()}, got {url} but its not a file\"\n            )\n            return\n\n    self.new_updater_config.server_config[\"build_number\"] = remote_build_number\n\n    server_data = CommonData(self.get_updater_name(), \"\")\n    server_data.set_url(url)\n    return server_data\n</code></pre>"},{"location":"reference/cupang_updater/utils/common/","title":"common","text":""},{"location":"reference/cupang_updater/utils/common/#cupang_updater.utils.common.ensure_path","title":"ensure_path","text":"<pre><code>ensure_path(path)\n</code></pre> <p>Ensure that the given path is a Path object.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to ensure.</p> <p> TYPE: <code>str | Path</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>Ensured Path object.</p> <p> TYPE: <code>Path</code> </p> Source code in <code>src\\cupang_updater\\utils\\common.py</code> <pre><code>def ensure_path(path: str | Path) -&gt; Path:\n    \"\"\"\n    Ensure that the given path is a Path object.\n\n    Args:\n        path (str | Path): Path to ensure.\n\n    Returns:\n        Path: Ensured Path object.\n    \"\"\"\n    return path if isinstance(path, Path) else Path(path)\n</code></pre>"},{"location":"reference/cupang_updater/utils/common/#cupang_updater.utils.common.reindent","title":"reindent","text":"<pre><code>reindent(text, size, ch=' ')\n</code></pre> <p>Removes existing indentation from the text and applies a new indentation.</p> PARAMETER DESCRIPTION <code>text</code> <p>Input text with existing indentation.</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Number of spaces for the new indentation.</p> <p> TYPE: <code>int</code> </p> <code>ch</code> <p>Character used for indentation (default is space).</p> <p> TYPE: <code>str</code> DEFAULT: <code>' '</code> </p> RETURNS DESCRIPTION <code>str</code> <p>Text with the new indentation applied.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src\\cupang_updater\\utils\\common.py</code> <pre><code>def reindent(text: str, size: int, ch: str = \" \") -&gt; str:\n    \"\"\"\n    Removes existing indentation from the text and applies a new indentation.\n\n    Args:\n        text (str): Input text with existing indentation.\n        size (int): Number of spaces for the new indentation.\n        ch (str): Character used for indentation (default is space).\n\n    Returns:\n        str: Text with the new indentation applied.\n    \"\"\"\n\n    text = _reindent_pattern.sub(\" \", text)\n\n    return textwrap.indent(textwrap.dedent(text), ch * size)\n</code></pre>"},{"location":"reference/cupang_updater/utils/common/#cupang_updater.utils.common.parse_version","title":"parse_version","text":"<pre><code>parse_version(version)\n</code></pre> <p>Parse a given version string into a valid version number.</p> PARAMETER DESCRIPTION <code>version</code> <p>Input version string.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Version</code> <p>Parsed version number.</p> <p> TYPE: <code>Version</code> </p> Notes <p>If the version string is invalid, it will be matched against a regex to extract the version number. If the regex does not match, it will be replaced with \"1.0\".</p> Source code in <code>src\\cupang_updater\\utils\\common.py</code> <pre><code>def parse_version(version: str) -&gt; Version:\n    \"\"\"\n    Parse a given version string into a valid version number.\n\n    Args:\n        version (str): Input version string.\n\n    Returns:\n        Version: Parsed version number.\n\n    Notes:\n        If the version string is invalid, it will be matched against a regex to\n        extract the version number. If the regex does not match, it will be\n        replaced with \"1.0\".\n    \"\"\"\n    try:\n        _version = Version(version).base_version\n    except InvalidVersion:\n        _match_version = re.search(r\"([\\d.]+)\", version)\n        if not _match_version:\n            _version = \"1.0\"\n        else:\n            _version = \"\".join(_match_version.group(1))\n    except Exception:\n        _version = \"1.0\"\n    return Version(_version)\n</code></pre>"},{"location":"reference/cupang_updater/utils/common/#cupang_updater.utils.common.remove_suffix","title":"remove_suffix","text":"<pre><code>remove_suffix(path)\n</code></pre> <p>Remove the suffix of a Path object.</p> PARAMETER DESCRIPTION <code>path</code> <p>Input Path object.</p> <p> TYPE: <code>Path</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>Path object with the suffix removed.</p> <p> TYPE: <code>Path</code> </p> Source code in <code>src\\cupang_updater\\utils\\common.py</code> <pre><code>def remove_suffix(path: Path) -&gt; Path:\n    \"\"\"\n    Remove the suffix of a Path object.\n\n    Args:\n        path (Path): Input Path object.\n\n    Returns:\n        Path: Path object with the suffix removed.\n    \"\"\"\n    path = ensure_path(path)\n    if path.suffix == \"\":\n        return path\n    return remove_suffix(path.with_suffix(\"\"))\n</code></pre>"},{"location":"reference/cupang_updater/utils/config/","title":"config","text":""},{"location":"reference/cupang_updater/utils/config/#cupang_updater.utils.config.fix_config","title":"fix_config","text":"<pre><code>fix_config(data, default_data, name=None)\n</code></pre> <p>Make data keys consistent with default_data keys.</p> Source code in <code>src\\cupang_updater\\utils\\config.py</code> <pre><code>def fix_config(data: sy.YAML, default_data: sy.YAML, name: str | None = None):\n    \"\"\"Make data keys consistent with default_data keys.\"\"\"\n\n    log = get_logger()\n    # Remove keys from data that are not in default_data\n    for key in data.data.keys() - default_data.data.keys():\n        log.info(f\"[red]Removing key {key}\" + (f\" from {name}\" if name else \"\"))\n        del data[key]\n\n    # Add keys to data that are present in default_data but not in data\n    for key in default_data.data.keys() - data.data.keys():\n        log.info(f\"[green]Adding key {key}\" + (f\" for {name}\" if name else \"\"))\n        data[key] = default_data[key]\n\n    return data\n</code></pre>"},{"location":"reference/cupang_updater/utils/config/#cupang_updater.utils.config.update_server_type","title":"update_server_type","text":"<pre><code>update_server_type(config, server_types)\n</code></pre> <p>Update comments in server.type</p> Source code in <code>src\\cupang_updater\\utils\\config.py</code> <pre><code>def update_server_type(config: Config, server_types: list[str]):\n    \"\"\"\n    Update comments in server.type\n    \"\"\"\n    # sort\n    server_types.sort()\n\n    server_schema = get_server_schema()\n    st_value: str = config.get(\"server.type\").data\n    server_as_yaml: str = config.get(\"server\").as_yaml()\n    _server_as_yaml = \"\"\n    for line in server_as_yaml.splitlines():\n        if \"type:\" in line:\n            st_index = line.find(st_value)\n            line = line[: st_index + len(st_value)].rstrip()\n            line += f\" # one of these: {', '.join(server_types)}\"\n        _server_as_yaml += line + \"\\n\"\n\n    new_server_config = sy.load(_server_as_yaml, sy.Map(server_schema))\n    config.set(\"server\", new_server_config)\n</code></pre>"},{"location":"reference/cupang_updater/utils/date/","title":"date","text":""},{"location":"reference/cupang_updater/utils/date/#cupang_updater.utils.date.parse_date_string","title":"parse_date_string","text":"<pre><code>parse_date_string(date_string, tz_info=_current_tzinfo)\n</code></pre> <p>Parse a date string into a datetime object, and set the timezone to tz_info if given.</p> PARAMETER DESCRIPTION <code>date_string</code> <p>The date string to parse.</p> <p> TYPE: <code>str</code> </p> <code>tz_info</code> <p>The timezone to set in the datetime object (default is the current system timezone).</p> <p> TYPE: <code>tzinfo</code> DEFAULT: <code>_current_tzinfo</code> </p> RETURNS DESCRIPTION <code>datetime</code> <p>The parsed datetime object in the specified timezone.</p> <p> TYPE: <code>datetime</code> </p> Source code in <code>src\\cupang_updater\\utils\\date.py</code> <pre><code>def parse_date_string(date_string: str, tz_info=_current_tzinfo) -&gt; datetime:\n    \"\"\"\n    Parse a date string into a datetime object, and set the timezone to tz_info if given.\n\n    Args:\n        date_string (str): The date string to parse.\n        tz_info (datetime.tzinfo): The timezone to set in the datetime object (default is the current system timezone).\n\n    Returns:\n        datetime: The parsed datetime object in the specified timezone.\n    \"\"\"\n    return dateutil.parser.parse(date_string).astimezone(tz_info)\n</code></pre>"},{"location":"reference/cupang_updater/utils/date/#cupang_updater.utils.date.parse_date_timestamp","title":"parse_date_timestamp","text":"<pre><code>parse_date_timestamp(timestamp, tz_info=_current_tzinfo)\n</code></pre> <p>Parse a timestamp into a datetime object, and set the timezone to tz_info if given.</p> PARAMETER DESCRIPTION <code>timestamp</code> <p>The timestamp to parse.</p> <p> TYPE: <code>int</code> </p> <code>tz_info</code> <p>The timezone to set in the datetime object (default is the current system timezone).</p> <p> TYPE: <code>tzinfo</code> DEFAULT: <code>_current_tzinfo</code> </p> RETURNS DESCRIPTION <code>datetime</code> <p>The parsed datetime object in the specified timezone.</p> <p> TYPE: <code>datetime</code> </p> Source code in <code>src\\cupang_updater\\utils\\date.py</code> <pre><code>def parse_date_timestamp(timestamp: int, tz_info=_current_tzinfo) -&gt; datetime:\n    \"\"\"\n    Parse a timestamp into a datetime object, and set the timezone to tz_info if given.\n\n    Args:\n        timestamp (int): The timestamp to parse.\n        tz_info (datetime.tzinfo): The timezone to set in the datetime object (default is the current system timezone).\n\n    Returns:\n        datetime: The parsed datetime object in the specified timezone.\n    \"\"\"\n    return datetime.fromtimestamp(timestamp, tz_info)\n</code></pre>"},{"location":"reference/cupang_updater/utils/date/#cupang_updater.utils.date.parse_date_datetime","title":"parse_date_datetime","text":"<pre><code>parse_date_datetime(date, tz_info=_current_tzinfo)\n</code></pre> <p>Parse a datetime object into another datetime object in a different timezone.</p> PARAMETER DESCRIPTION <code>date</code> <p>The datetime object to parse.</p> <p> TYPE: <code>datetime</code> </p> <code>tz_info</code> <p>The timezone to set in the datetime object (default is the current system timezone).</p> <p> TYPE: <code>tzinfo</code> DEFAULT: <code>_current_tzinfo</code> </p> RETURNS DESCRIPTION <code>datetime</code> <p>The parsed datetime object in the specified timezone.</p> <p> TYPE: <code>datetime</code> </p> Source code in <code>src\\cupang_updater\\utils\\date.py</code> <pre><code>def parse_date_datetime(date: datetime, tz_info=_current_tzinfo) -&gt; datetime:\n    \"\"\"\n    Parse a datetime object into another datetime object in a different timezone.\n\n    Args:\n        date (datetime): The datetime object to parse.\n        tz_info (datetime.tzinfo): The timezone to set in the datetime object (default is the current system timezone).\n\n    Returns:\n        datetime: The parsed datetime object in the specified timezone.\n    \"\"\"\n    return date.astimezone(tz_info)\n</code></pre>"},{"location":"reference/cupang_updater/utils/date/#cupang_updater.utils.date.parse_date_utc","title":"parse_date_utc","text":"<pre><code>parse_date_utc(date)\n</code></pre> <p>Parse a datetime object into another datetime object in the UTC timezone.</p> PARAMETER DESCRIPTION <code>date</code> <p>The datetime object to parse.</p> <p> TYPE: <code>datetime</code> </p> RETURNS DESCRIPTION <code>datetime</code> <p>The parsed datetime object in the UTC timezone.</p> <p> TYPE: <code>datetime</code> </p> Source code in <code>src\\cupang_updater\\utils\\date.py</code> <pre><code>def parse_date_utc(date: datetime) -&gt; datetime:\n    \"\"\"\n    Parse a datetime object into another datetime object in the UTC timezone.\n\n    Args:\n        date (datetime): The datetime object to parse.\n\n    Returns:\n        datetime: The parsed datetime object in the UTC timezone.\n    \"\"\"\n    return date.astimezone(_utc_tzinfo)\n</code></pre>"},{"location":"reference/cupang_updater/utils/hash/","title":"hash","text":""},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash","title":"FileHash","text":"<pre><code>FileHash(file)\n</code></pre> Source code in <code>src\\cupang_updater\\utils\\hash.py</code> <pre><code>def __init__(self, file: Path | str):\n    self._file = ensure_path(file)\n    self._hashes: dict[str, str] = {}\n</code></pre>"},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash.md5","title":"md5  <code>property</code>","text":"<pre><code>md5\n</code></pre> <p>Computes and returns the MD5 hash value of the file.</p> RETURNS DESCRIPTION <code>str</code> <p>The computed hash value as a hexadecimal string.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash.sha1","title":"sha1  <code>property</code>","text":"<pre><code>sha1\n</code></pre> <p>Computes and returns the SHA-1 hash value of the file as a string.</p> RETURNS DESCRIPTION <code>str</code> <p>The computed hash value as a hexadecimal string.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash.sha256","title":"sha256  <code>property</code>","text":"<pre><code>sha256\n</code></pre> <p>Computes and returns the SHA-256 hash value of the file.</p> RETURNS DESCRIPTION <code>str</code> <p>The computed hash value as a hexadecimal string.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash.sha512","title":"sha512  <code>property</code>","text":"<pre><code>sha512\n</code></pre> <p>Computes and returns the SHA-512 hash value of the file.</p> RETURNS DESCRIPTION <code>str</code> <p>The computed hash value as a hexadecimal string.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/cupang_updater/utils/hash/#cupang_updater.utils.hash.FileHash.new_file","title":"new_file  <code>classmethod</code>","text":"<pre><code>new_file(file, known_hashes=None)\n</code></pre> <p>Create a new FileHash instance for the given file</p> PARAMETER DESCRIPTION <code>file</code> <p>The path to the file for which to create the FileHash instance.</p> <p> TYPE: <code>Path | str</code> </p> <code>known_hashes</code> <p>A dictionary of known hash values for the file, where keys are hash algorithm names (e.g., 'md5', 'sha256') and values are the corresponding hash values.</p> <p> TYPE: <code>dict[str, str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>FileHash</code> <p>A new instance of FileHash initialized with the given file and known hashes.</p> <p> TYPE: <code>Self</code> </p> Source code in <code>src\\cupang_updater\\utils\\hash.py</code> <pre><code>@classmethod\ndef new_file(cls, file: Path | str, known_hashes: dict[str, str] = None) -&gt; Self:\n    \"\"\"\n    Create a new FileHash instance for the given file\n\n    Args:\n        file (Path | str): The path to the file for which to create the FileHash instance.\n        known_hashes (dict[str, str], optional): A dictionary of known hash values for the file,\n            where keys are hash algorithm names (e.g., 'md5', 'sha256') and values are the corresponding hash values.\n\n    Returns:\n        FileHash: A new instance of FileHash initialized with the given file and known hashes.\n    \"\"\"\n    instance = cls(file)\n    if known_hashes is not None:\n        instance._hashes.update(known_hashes)\n    return instance\n</code></pre>"},{"location":"reference/cupang_updater/utils/jar/","title":"jar","text":""},{"location":"reference/cupang_updater/utils/jar/#cupang_updater.utils.jar.JarInfo","title":"JarInfo  <code>dataclass</code>","text":"<pre><code>JarInfo(name, version, authors)\n</code></pre>"},{"location":"reference/cupang_updater/utils/jar/#cupang_updater.utils.jar.JarInfo.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/cupang_updater/utils/jar/#cupang_updater.utils.jar.JarInfo.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/cupang_updater/utils/jar/#cupang_updater.utils.jar.JarInfo.authors","title":"authors  <code>instance-attribute</code>","text":"<pre><code>authors\n</code></pre>"},{"location":"reference/cupang_updater/utils/jar/#cupang_updater.utils.jar.get_jar_info","title":"get_jar_info","text":"<pre><code>get_jar_info(jar_path)\n</code></pre> <p>Extract metadata from a given jar file.</p> <p>Supports Bukkit, Velocity, Fabric, and Forge mods.</p> PARAMETER DESCRIPTION <code>jar_path</code> <p>Path to the jar file.</p> <p> TYPE: <code>str | Path</code> </p> RETURNS DESCRIPTION <code>JarInfo</code> <p>A JarInfo instance containing the metadata.</p> <p> TYPE: <code>JarInfo</code> </p> Source code in <code>src\\cupang_updater\\utils\\jar.py</code> <pre><code>def get_jar_info(jar_path: str | Path) -&gt; JarInfo:\n    \"\"\"Extract metadata from a given jar file.\n\n    Supports Bukkit, Velocity, Fabric, and Forge mods.\n\n    Args:\n        jar_path (str | Path): Path to the jar file.\n\n    Returns:\n        JarInfo: A JarInfo instance containing the metadata.\n    \"\"\"\n    with zipfile.ZipFile(ensure_path(jar_path)) as jar:\n        config: dict[str, Any]\n        plugin_name: str | None = None\n        plugin_version: str | None = None\n        plugin_authors: list[str] | None = None\n\n        # Bukkit (including Paper)\n        bukkit_files = [\n            file_name\n            for file_name in [\"paper-plugin.yml\", \"plugin.yml\", \"bunge.yml\"]\n            if file_name in jar.namelist()\n        ]\n        if bukkit_files:\n            for bukkit_file in bukkit_files:\n                with jar.open(bukkit_file, \"r\") as file:\n                    config = sy.dirty_load(\n                        file.read().decode(),\n                        schema=_jar_yaml_schema,\n                        allow_flow_style=True,\n                    ).data\n\n                    plugin_name = config.get(\"name\")\n                    plugin_version = config.get(\"version\")\n                    plugin_authors = config.get(\"authors\", config.get(\"author\"))\n                break\n\n        # Velocity\n        elif \"velocity-plugin.json\" in jar.namelist():\n            with jar.open(\"velocity-plugin.json\", \"r\") as file:\n                config = json.load(file)\n\n                plugin_name = config.get(\"name\", config.get(\"id\"))\n                plugin_version = config.get(\"version\")\n                plugin_authors = config.get(\"authors\")\n\n        # Fabric\n        elif \"fabric.mod.json\" in jar.namelist():\n            with jar.open(\"fabric.mod.json\", \"r\") as file:\n                config = json.load(file)\n\n                plugin_name = config.get(\"name\", config.get(\"id\"))\n                plugin_version = config.get(\"version\")\n                plugin_authors = config.get(\"authors\")\n\n        # Forge\n        elif \"META-INF/mods.toml\" in jar.namelist():\n            with jar.open(\"META-INF/mods.toml\", \"r\") as file:\n                config = toml.loads(file.read().decode())\n\n                if config.get(\"mods\"):\n                    mod_info = config[\"mods\"][0]\n                    plugin_name = mod_info.get(\"modId\")\n                    plugin_version = mod_info.get(\"version\")\n                    plugin_authors = mod_info.get(\"authors\")\n\n        # Ensure authors are represented as a list\n        if isinstance(plugin_authors, str):\n            plugin_authors = [plugin_authors]\n\n        # Ensure version is a string\n        plugin_version = plugin_version or \"0\"\n        if isinstance(plugin_version, list):\n            plugin_version = plugin_version[0]\n        plugin_version = str(plugin_version)\n\n        return JarInfo(plugin_name, plugin_version, plugin_authors)\n</code></pre>"},{"location":"reference/cupang_updater/utils/url/","title":"url","text":""},{"location":"reference/cupang_updater/utils/url/#cupang_updater.utils.url.make_url","title":"make_url","text":"<pre><code>make_url(base, *paths, **queries)\n</code></pre> <p>Make a URL by joining the given base URL with the given paths and queries.</p> PARAMETER DESCRIPTION <code>base</code> <p>The base URL to join with.</p> <p> TYPE: <code>str</code> </p> <code>paths</code> <p>Paths to join with the base URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> <code>queries</code> <p>Query parameters to add to the URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The joined URL.</p> <p> TYPE: <code>str</code> </p> <p>Example:</p> <p>make_url(\"https://example.com\", \"path\", \"to\", \"resource\", key=\"value\") \"https://example.com/path/to/resource?key=value\"</p> Source code in <code>src\\cupang_updater\\utils\\url.py</code> <pre><code>def make_url(base: str, *paths: str, **queries: str) -&gt; str:\n    \"\"\"\n    Make a URL by joining the given base URL with the given paths and queries.\n\n    Args:\n        base (str): The base URL to join with.\n        paths (str): Paths to join with the base URL.\n        queries (str): Query parameters to add to the URL.\n\n    Returns:\n        str: The joined URL.\n\n    Example:\n    &gt;&gt;&gt; make_url(\"https://example.com\", \"path\", \"to\", \"resource\", key=\"value\")\n    \"https://example.com/path/to/resource?key=value\"\n    \"\"\"\n    base = base.rstrip(\"/\")\n    parsed = urllib.parse.urlparse(base)\n    paths = [str(x) for x in paths]\n    joined_path = \"/\".join((*parsed.path.split(\"/\"), *paths))\n    query_string = urllib.parse.urlencode({k: str(v) for k, v in queries.items()})\n    return urllib.parse.urlunparse(\n        (parsed.scheme, parsed.netloc, joined_path, \"\", query_string, \"\")\n    )\n</code></pre>"},{"location":"reference/cupang_updater/utils/url/#cupang_updater.utils.url.make_requests","title":"make_requests","text":"<pre><code>make_requests(url, method='GET', headers=None, timeout=10)\n</code></pre> <p>Make an HTTP request to the given URL using the given method and headers.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to request.</p> <p> TYPE: <code>str</code> </p> <code>method</code> <p>The HTTP method to use (default: \"GET\").</p> <p> TYPE: <code>str</code> DEFAULT: <code>'GET'</code> </p> <code>headers</code> <p>Additional HTTP headers to include in the request.</p> <p> TYPE: <code>dict[str, str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>HTTPResponse | None</code> <p>HTTPResponse | None: The response from the server, or None if an error occurred.</p> <p>Example:</p> <p>make_requests(\"https://example.com\", \"GET\", {\"Accept\": \"text/html\"})  make_requests( ...     \"https://example.com\", \"POST\", {\"Content-Type\": \"application/json\"} ... ) Source code in <code>src\\cupang_updater\\utils\\url.py</code> <pre><code>def make_requests(\n    url: str,\n    method: str = \"GET\",\n    headers: dict[str, str] | None = None,\n    timeout: int = 10,\n) -&gt; HTTPResponse | None:\n    \"\"\"\n    Make an HTTP request to the given URL using the given method and headers.\n\n    Args:\n        url (str): The URL to request.\n        method (str): The HTTP method to use (default: \"GET\").\n        headers (dict[str, str]): Additional HTTP headers to include in the request.\n\n    Returns:\n        HTTPResponse | None: The response from the server, or None if an error occurred.\n\n    Example:\n    &gt;&gt;&gt; make_requests(\"https://example.com\", \"GET\", {\"Accept\": \"text/html\"})\n    &lt;http.client.HTTPResponse object at 0x...&gt;\n    &gt;&gt;&gt; make_requests(\n    ...     \"https://example.com\", \"POST\", {\"Content-Type\": \"application/json\"}\n    ... )\n    &lt;http.client.HTTPResponse object at 0x...&gt;\n    \"\"\"\n    headers = {**default_headers, **(headers or {})}\n    req = urllib.request.Request(url, method=method, headers=headers)\n    try:\n        res = urllib.request.urlopen(req, timeout=timeout)\n    except (urllib.error.URLError, urllib.error.HTTPError) as e:\n        msg = f'Error while requesting data from \"{url}\" {type(e).__qualname__}: {e}'\n        try:\n            get_logger().info(msg)\n        except RuntimeError:\n            print(msg)\n        return\n    return res\n</code></pre>"},{"location":"reference/cupang_updater/utils/url/#cupang_updater.utils.url.check_content_type","title":"check_content_type","text":"<pre><code>check_content_type(res, content_type)\n</code></pre> <p>Check if the given HTTPResponse has the given content type.</p> PARAMETER DESCRIPTION <code>res</code> <p>The HTTP response to check.</p> <p> TYPE: <code>HTTPResponse</code> </p> <code>content_type</code> <p>The content type to check for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the content type matches, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src\\cupang_updater\\utils\\url.py</code> <pre><code>def check_content_type(res: HTTPResponse, content_type: str) -&gt; bool:\n    \"\"\"\n    Check if the given HTTPResponse has the given content type.\n\n    Args:\n        res (HTTPResponse): The HTTP response to check.\n        content_type (str): The content type to check for.\n\n    Returns:\n        bool: True if the content type matches, False otherwise.\n    \"\"\"\n    if res is None:\n        return False\n    if res.status != HTTPStatus.OK:\n        return False\n\n    if (\n        res.getheader(\"content-type\", \"\").split(\";\", maxsplit=1)[0].lower()\n        != content_type.lower()\n    ):\n        return False\n    return True\n</code></pre>"}]}